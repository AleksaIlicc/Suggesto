<!doctype html>
<html lang="en">
  <head>
    <title>Edit <%= app.name %> - Suggesto</title>
    <%- include('../../shared/includes/meta') %> <%-
    include('../../shared/includes/styles') %>
  </head>
  <body class="bg-background">
    <div class="flex min-h-screen flex-col items-center">
      <%- include('../../shared/partials/header') %>

      <main class="w-full max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8 w-full">
          <div class="mb-2 flex items-center space-x-4">
            <a
              href="/apps"
              class="flex items-center text-gray-600 transition-colors hover:text-gray-900">
              <i class="fas fa-arrow-left mr-2"></i>
              Back to My Apps
            </a>
          </div>
          <h1 class="text-gray-dark mb-2 text-3xl font-bold">Edit App</h1>
          <p class="text-base text-gray-600">
            Update your feedback collection app and see how it looks in
            real-time.
          </p>
        </div>

        <!-- Main Content: Form + Preview -->
        <div class="flex w-full flex-col gap-8 lg:flex-row">
          <!-- Configuration Panel -->
          <div class="w-full lg:w-1/2">
            <div
              class="rounded-2xl border border-gray-100 bg-white p-8 shadow-lg">
              <h2 class="mb-6 text-xl font-semibold text-gray-900">
                App Configuration
              </h2>

              <% if (messages.error) { %>
              <div class="mb-4 rounded-lg bg-red-50 p-4 text-red-800">
                <p><%= messages.error %></p>
              </div>
              <% } %> <% if (messages.success) { %>
              <div class="mb-4 rounded-lg bg-green-50 p-4 text-green-800">
                <p><%= messages.success %></p>
              </div>
              <% } %>

              <form
                id="appForm"
                action="/apps/<%= app._id %>?_method=PUT"
                method="post"
                class="space-y-6">
                <!-- Basic Information -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Basic Information
                  </h3>

                  <div>
                    <label
                      for="name"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      App Name *
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      required
                      value="<%= app.name %>"
                      placeholder="e.g., My Awesome App"
                      class="w-full rounded-xl border border-gray-300 px-4 py-3 transition-colors focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                      oninput="updatePreview()" />
                    <p class="mt-1 text-xs text-gray-500">
                      This will be the main title of your feedback app
                    </p>
                  </div>

                  <div>
                    <label
                      for="description"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      Description *
                    </label>
                    <textarea
                      id="description"
                      name="description"
                      required
                      rows="3"
                      placeholder="Brief description of what feedback you're collecting..."
                      class="w-full resize-none rounded-xl border border-gray-300 px-4 py-3 transition-colors focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                      oninput="updatePreview()">
                      <%= app.description %></textarea
                    >
                    <p class="mt-1 text-xs text-gray-500">
                      Explain what kind of feedback or suggestions you want
                    </p>
                  </div>
                </div>

                <!-- Logo Upload -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Logo & Branding
                  </h3>

                  <div>
                    <label
                      for="logo"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      App Logo (optional)
                    </label>
                    <div class="flex items-center space-x-4">
                      <div class="flex-shrink-0">
                        <div
                          id="logoPreviewContainer"
                          class="flex h-16 w-16 items-center justify-center overflow-hidden rounded-full border-2 border-gray-200 bg-gray-100">
                          <% if (app.design?.logo) { %>
                          <img
                            id="logoPreviewImg"
                            src="<%= app.design.logo %>"
                            alt="Logo"
                            class="h-full w-full object-cover" />
                          <% } else { %>
                          <span
                            id="logoPreviewText"
                            class="text-xl font-medium text-gray-400"
                            ><%= app.name.charAt(0).toUpperCase() %></span
                          >
                          <% } %>
                        </div>
                      </div>
                      <div class="flex-1">
                        <input
                          type="file"
                          id="logoUpload"
                          accept="image/*"
                          class="hidden"
                          onchange="handleLogoUpload()" />
                        <input
                          type="hidden"
                          id="logo"
                          name="logo"
                          value="<%= app.design?.logo || '' %>" />
                        <button
                          id="chooseImageBtn"
                          type="button"
                          onclick="document.getElementById('logoUpload').click()"
                          class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-gray-200 focus:outline-none">
                          <i class="fas fa-image mr-2"></i>
                          Choose Image
                        </button>
                        <button
                          id="removeLogo"
                          type="button"
                          onclick="removeAppLogo()"
                          <% if (!app.design?.logo) { %>style="display: none"<% } %>
                          class="ml-2 inline-flex items-center rounded-lg border border-red-300 bg-white px-3 py-2 text-sm font-medium text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                          Remove
                        </button>
                      </div>
                    </div>
                    <p class="mt-1 text-xs text-gray-500">
                      Upload a square image (recommended: 64x64px or larger)
                    </p>
                  </div>
                </div>

                <!-- Design Customization -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Design & Colors
                  </h3>

                  <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div>
                      <label
                        for="headerColor"
                        class="mb-2 block text-sm font-medium text-gray-700">
                        Header Color
                      </label>
                      <div class="flex items-center space-x-3">
                        <input
                          type="color"
                          id="headerColor"
                          name="headerColor"
                          value="<%= app.design?.headerColor || '#374151' %>"
                          class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                          onchange="updatePreview()" />
                        <input
                          type="text"
                          id="headerColorText"
                          value="<%= app.design?.headerColor || '#374151' %>"
                          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                          oninput="updateColorFromText('header')" />
                      </div>
                      <p class="mt-1 text-xs text-gray-500">
                        Background color for the header section
                      </p>
                    </div>

                    <div>
                      <label
                        for="buttonColor"
                        class="mb-2 block text-sm font-medium text-gray-700">
                        Button Color
                      </label>
                      <div class="flex items-center space-x-3">
                        <input
                          type="color"
                          id="buttonColor"
                          name="buttonColor"
                          value="<%= app.design?.buttonColor || '#111827' %>"
                          class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                          onchange="updatePreview()" />
                        <input
                          type="text"
                          id="buttonColorText"
                          value="<%= app.design?.buttonColor || '#111827' %>"
                          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                          oninput="updateColorFromText('button')" />
                      </div>
                      <p class="mt-1 text-xs text-gray-500">
                        Color for buttons and call-to-action elements
                      </p>
                    </div>

                    <div>
                      <label
                        for="backgroundColor"
                        class="mb-2 block text-sm font-medium text-gray-700">
                        Background Color
                      </label>
                      <div class="flex items-center space-x-3">
                        <input
                          type="color"
                          id="backgroundColor"
                          name="backgroundColor"
                          value="<%= app.design?.backgroundColor || '#F3F4F6' %>"
                          class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                          onchange="updatePreview()" />
                        <input
                          type="text"
                          id="backgroundColorText"
                          value="<%= app.design?.backgroundColor || '#F3F4F6' %>"
                          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                          oninput="updateColorFromText('background')" />
                      </div>
                      <p class="mt-1 text-xs text-gray-500">
                        Background color for the main content area
                      </p>
                    </div>
                  </div>

                  <!-- Suggestions Section Colors -->
                  <div class="space-y-4 border-t border-gray-200 pt-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Suggestions Section Colors
                    </h4>
                    
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                      <div>
                        <label
                          for="suggestionsHeaderColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestions Header Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionsHeaderColor"
                            name="suggestionsHeaderColor"
                            value="<%= app.design?.suggestionsHeaderColor || '#111827' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionsHeaderColorText"
                            value="<%= app.design?.suggestionsHeaderColor || '#111827' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionsHeader')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for "Recent Suggestions" heading
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestion Text Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionTextColor"
                            name="suggestionTextColor"
                            value="<%= app.design?.suggestionTextColor || '#374151' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionTextColorText"
                            value="<%= app.design?.suggestionTextColor || '#374151' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for suggestion titles and descriptions
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionCardBgColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestion Card Background
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionCardBgColor"
                            name="suggestionCardBgColor"
                            value="<%= app.design?.suggestionCardBgColor || '#F9FAFB' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionCardBgColorText"
                            value="<%= app.design?.suggestionCardBgColor || '#F9FAFB' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionCardBg')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Background color for suggestion cards
                        </p>
                      </div>

                      <div>
                        <label
                          for="voteButtonBgColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Vote Button Background
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="voteButtonBgColor"
                            name="voteButtonBgColor"
                            value="<%= app.design?.voteButtonBgColor || '#E5E7EB' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="voteButtonBgColorText"
                            value="<%= app.design?.voteButtonBgColor || '#E5E7EB' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('voteButtonBg')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Background color for vote buttons
                        </p>
                      </div>

                      <div>
                        <label
                          for="voteButtonTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Vote Button Text Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="voteButtonTextColor"
                            name="voteButtonTextColor"
                            value="<%= app.design?.voteButtonTextColor || '#374151' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="voteButtonTextColorText"
                            value="<%= app.design?.voteButtonTextColor || '#374151' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('voteButtonText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Text color for vote buttons
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionMetaColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestion Meta Text Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionMetaColor"
                            name="suggestionMetaColor"
                            value="<%= app.design?.suggestionMetaColor || '#6B7280' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionMetaColorText"
                            value="<%= app.design?.suggestionMetaColor || '#6B7280' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionMeta')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for author, date, and vote count text
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Preset Color Themes -->
                  <div>
                    <label class="mb-3 block text-sm font-medium text-gray-700"
                      >Quick Themes</label
                    >
                    <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
                      <button
                        type="button"
                        onclick="applyFullTheme('#374151', '#111827', '#F3F4F6', '#111827', '#374151', '#F9FAFB', '#E5E7EB', '#374151', '#6B7280')"
                        class="flex items-center space-x-2 rounded-lg border border-gray-300 p-3 transition-colors hover:border-gray-400">
                        <div class="h-4 w-4 rounded-full bg-gray-600"></div>
                        <span class="text-xs">Default</span>
                      </button>
                      <button
                        type="button"
                        onclick="applyFullTheme('#5E81AC', '#2E3440', '#ECEFF4', '#2E3440', '#4C566A', '#F9FBFF', '#D8DEE9', '#2E3440', '#8891A4')"
                        class="flex items-center space-x-2 rounded-lg border border-gray-300 p-3 transition-colors hover:border-gray-400">
                        <div class="h-4 w-4 rounded-full bg-[#5E81AC]"></div>
                        <span class="text-xs">Ocean</span>
                      </button>
                      <button
                        type="button"
                        onclick="applyFullTheme('#6DB56D', '#3E4E3E', '#F3F8F2', '#3E4E3E', '#5A6B5A', '#F8FBF8', '#E8F4E8', '#3E4E3E', '#9CA3AF')"
                        class="flex items-center space-x-2 rounded-lg border border-gray-300 p-3 transition-colors hover:border-gray-400">
                        <div class="h-4 w-4 rounded-full bg-[#6DB56D]"></div>
                        <span class="text-xs">Meadow</span>
                      </button>
                      <button
                        type="button"
                        onclick="applyFullTheme('#2d6da9', '#1f477e', '#e2e7e8', '#1f477e', '#4a6ba3', '#f0f4f7', '#d1dde6', '#1f477e', '#78909C')"
                        class="flex items-center space-x-2 rounded-lg border border-gray-300 p-3 transition-colors hover:border-gray-400">
                        <div class="h-4 w-4 rounded-full bg-[#2d6da9]"></div>
                        <span class="text-xs">Sky</span>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Categories Configuration -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Categories Configuration
                  </h3>

                  <!-- Category Toggle -->
                  <div class="space-y-1">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="defaultCategoriesEnabled"
                        name="defaultCategoriesEnabled"
                        value="true"
                        <%= app.defaultCategoriesEnabled ? 'checked' : '' %>
                        class="h-4 w-4 text-gray-dark bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                        onchange="toggleCategoryMode()" />
                      <label
                        for="defaultCategoriesEnabled"
                        class="text-sm font-medium text-gray-700">
                        Use default categories (bug, feature, improvement, other)
                      </label>
                    </div>
                    <p class="text-xs text-gray-500 ml-7">
                      Uncheck to create your own custom categories
                    </p>
                  </div>

                  <!-- Custom Categories Section -->
                  <div id="customCategoriesSection" class="<%= app.defaultCategoriesEnabled ? 'hidden' : '' %> space-y-3">
                    <label class="block text-sm font-medium text-gray-700">
                      Custom Categories
                    </label>
                    <div id="customCategoriesList" class="space-y-2">
                      <% if (app.customCategories && app.customCategories.length > 0) { %>
                        <% app.customCategories.forEach((category, index) => { %>
                          <div class="custom-category-item flex items-center space-x-3">
                            <input
                              type="text"
                              name="customCategories[<%= index %>][name]"
                              placeholder="Category name"
                              value="<%= category.name %>"
                              class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                              required />
                            <input
                              type="color"
                              name="customCategories[<%= index %>][color]"
                              value="<%= category.color %>"
                              class="h-10 w-16 cursor-pointer rounded-lg border border-gray-300" />
                            <button
                              type="button"
                              onclick="removeCustomCategory(this)"
                              class="flex h-8 w-8 items-center justify-center rounded-lg border border-red-300 bg-white text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                              <i class="fas fa-times text-xs"></i>
                            </button>
                          </div>
                        <% }); %>
                      <% } %>
                    </div>
                    <button
                      type="button"
                      onclick="addCustomCategory()"
                      class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-gray-200 focus:outline-none">
                      <i class="fas fa-plus mr-2"></i>
                      Add Category
                    </button>
                  </div>
                </div>

                <!-- Privacy & Access Settings -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Privacy & Access Settings
                  </h3>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="isPublic"
                        name="isPublic"
                        value="true"
                        <%= app.isPublic !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="isPublic"
                        class="text-sm font-medium text-gray-700">
                        Make app publicly visible
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only you can view and access the app
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="allowAnonymousVotes"
                        name="allowAnonymousVotes"
                        value="true"
                        <%= app.allowAnonymousVotes !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="allowAnonymousVotes"
                        class="text-sm font-medium text-gray-700">
                        Allow anonymous voting
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only signed-in users can vote on suggestions
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="allowPublicSubmissions"
                        name="allowPublicSubmissions"
                        value="true"
                        <%= app.allowPublicSubmissions !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="allowPublicSubmissions"
                        class="text-sm font-medium text-gray-700">
                        Allow public submissions
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only signed-in users can submit suggestions
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="enablePublicRoadmap"
                        name="enablePublicRoadmap"
                        value="true"
                        <%= app.enablePublicRoadmap === true ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="enablePublicRoadmap"
                        class="text-sm font-medium text-gray-700">
                        Enable public roadmap
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      Allow users to see your development roadmap and progress
                    </p>
                  </div>
                </div>

                <!-- Submit Button -->
                <div class="pt-4">
                  <div class="flex space-x-4">
                    <button
                      type="submit"
                      class="bg-gray-dark hover:bg-gray-light flex-1 rounded-xl px-6 py-3 font-medium text-white shadow-lg transition-all duration-200 hover:shadow-xl">
                      Save Changes
                    </button>
                    <a
                      href="/apps/<%= app._id %>"
                      class="hover:border-gray-dark text-gray-dark flex flex-1 items-center justify-center rounded-xl border-2 border-gray-300 px-6 py-3 text-center font-medium transition-all duration-200">
                      Cancel
                    </a>
                  </div>
                </div>
              </form>

              <!-- Danger Zone -->
              <div class="mt-8 border-t border-red-200 pt-8">
                <h3 class="mb-4 text-lg font-medium text-red-600">
                  Danger Zone
                </h3>
                <p class="mb-4 text-sm text-gray-600">
                  Deleting this application will permanently remove all
                  suggestions, votes, and related data. This action cannot be
                  undone.
                </p>
                <button
                  onclick="confirmDelete()"
                  class="inline-flex items-center rounded-lg border border-red-300 bg-white px-4 py-2 text-sm font-medium text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                  <svg
                    class="mr-2 h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Delete Application
                </button>
              </div>
            </div>
          </div>

          <!-- Live Preview Panel -->
          <div class="w-full lg:w-1/2">
            <div class="sticky top-8">
              <div
                class="overflow-hidden rounded-2xl border border-gray-100 bg-white shadow-lg">
                <div class="border-b border-gray-200 bg-gray-100 px-4 py-3">
                  <div class="flex items-center space-x-2">
                    <div class="h-3 w-3 rounded-full bg-red-400"></div>
                    <div class="h-3 w-3 rounded-full bg-yellow-400"></div>
                    <div class="h-3 w-3 rounded-full bg-green-400"></div>
                    <div class="flex-1 text-center">
                      <span class="font-mono text-xs text-gray-500"
                        >Preview</span
                      >
                    </div>
                  </div>
                </div>

                <!-- Preview Content -->
                <div id="previewContent" class="min-h-[600px]">
                  <!-- Header Section -->
                  <div
                    id="previewHeader"
                    class="flex w-full justify-center p-6 shadow-sm">
                    <div
                      class="flex w-full max-w-6xl flex-col justify-center space-y-3">
                      <div class="flex items-center space-x-4">
                        <div
                          id="previewLogoContainer"
                          class="flex h-12 w-12 items-center justify-center overflow-hidden rounded-full bg-white">
                          <% if (app.design?.logo) { %>
                          <img
                            id="previewLogoImg"
                            src="<%= app.design.logo %>"
                            alt="Logo"
                            class="h-full w-full object-cover" />
                          <% } else { %>
                          <span
                            id="previewIcon"
                            class="text-lg font-medium text-black"
                            ><%= app.name.charAt(0).toUpperCase() %></span
                          >
                          <% } %>
                        </div>
                        <div>
                          <h1
                            id="previewTitle"
                            class="text-xl font-medium text-white sm:text-2xl">
                            <%= app.name %>
                          </h1>
                          <p class="text-sm text-gray-200">by You</p>
                        </div>
                      </div>
                      <p
                        id="previewDescription"
                        class="max-w-2xl text-sm text-gray-100 sm:text-base">
                        <%= app.description %>
                      </p>
                    </div>
                  </div>

                  <!-- Content Section -->
                  <div class="bg-background px-6 py-6">
                    <div class="mb-6 w-full">
                      <button
                        id="previewButton"
                        type="button"
                        class="inline-block cursor-pointer rounded-xl px-6 py-3 text-base font-medium text-white transition-colors"
                        disabled>
                        Submit Feature Request
                      </button>
                    </div>
                  </div>

                  <!-- Sample Suggestions -->
                  <div class="px-6 py-8">
                    <h2 id="previewSuggestionsHeader" class="mb-4 text-xl font-semibold" style="color: #111827;">
                      Recent Suggestions
                    </h2>

                    <div class="space-y-3">
                      <div
                        id="previewSuggestionCard1"
                        class="rounded-xl border border-gray-100 p-4 shadow-sm transition-all hover:shadow-md"
                        style="background-color: #F9FAFB;">
                        <div class="mb-3 flex flex-wrap items-center gap-2">
                          <span
                            class="inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800">
                            Pending
                          </span>
                          <span id="previewSuggestionMeta1" class="text-xs" style="color: #6B7280;"
                            >by Anonymous • Dec 15, 2024</span
                          >
                        </div>
                        <div
                          class="flex flex-col space-y-3 space-x-0 sm:flex-row sm:items-start sm:justify-between sm:space-y-0 sm:space-x-4">
                          <div class="flex-1">
                            <h3
                              id="previewSuggestionTitle1"
                              class="mb-2 text-base font-semibold sm:text-lg"
                              style="color: #374151;">
                              Add dark mode support
                            </h3>
                            <p
                              id="previewSuggestionText1"
                              class="mb-3 text-sm leading-relaxed sm:text-base"
                              style="color: #374151;">
                              Would love to have a dark theme option for better
                              user experience during night time usage.
                            </p>
                          </div>
                          <div class="flex flex-col items-end space-y-2">
                            <div class="flex items-center space-x-2">
                              <span id="previewVoteCount1" class="text-sm" style="color: #6B7280;"
                                >23 votes</span
                              >
                              <button
                                id="previewVoteButton1"
                                class="flex h-8 w-8 items-center justify-center rounded-lg text-sm font-medium transition-opacity hover:opacity-90"
                                style="background-color: #E5E7EB; color: #374151;">
                                ↑
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <%- include('../../shared/includes/scripts') %>

    <script>
      // Initialize preview on page load
      document.addEventListener('DOMContentLoaded', function () {
        // Set initial colors from server-side values
        const headerColor = '<%= app.design?.headerColor || "#374151" %>';
        const buttonColor = '<%= app.design?.buttonColor || "#111827" %>';
        const backgroundColor =
          '<%= app.design?.backgroundColor || "#F3F4F6" %>';
        const suggestionsHeaderColor = '<%= app.design?.suggestionsHeaderColor || "#111827" %>';
        const suggestionTextColor = '<%= app.design?.suggestionTextColor || "#374151" %>';
        const suggestionCardBgColor = '<%= app.design?.suggestionCardBgColor || "#F9FAFB" %>';
        const voteButtonBgColor = '<%= app.design?.voteButtonBgColor || "#E5E7EB" %>';
        const voteButtonTextColor = '<%= app.design?.voteButtonTextColor || "#374151" %>';
        const suggestionMetaColor = '<%= app.design?.suggestionMetaColor || "#6B7280" %>';

        // Apply initial styles
        document.getElementById('previewHeader').style.backgroundColor =
          headerColor;
        document.getElementById('previewButton').style.backgroundColor =
          buttonColor;
        
        // Apply suggestions colors
        document.getElementById('previewSuggestionsHeader').style.color = suggestionsHeaderColor;
        document.getElementById('previewSuggestionCard1').style.backgroundColor = suggestionCardBgColor;
        document.getElementById('previewSuggestionTitle1').style.color = suggestionTextColor;
        document.getElementById('previewSuggestionText1').style.color = suggestionTextColor;
        document.getElementById('previewVoteButton1').style.backgroundColor = voteButtonBgColor;
        document.getElementById('previewVoteButton1').style.color = voteButtonTextColor;
        document.getElementById('previewSuggestionMeta1').style.color = suggestionMetaColor;
        document.getElementById('previewVoteCount1').style.color = suggestionMetaColor;

        // Update background colors (only in preview area)
        const contentSections = document.querySelectorAll(
          '#previewContent .bg-background'
        );
        contentSections.forEach(section => {
          section.style.backgroundColor = backgroundColor;
        });

        updatePreview();
      });

      function updatePreview() {
        const name = document.getElementById('name').value || '<%= app.name %>';
        const description =
          document.getElementById('description').value ||
          '<%= app.description %>';
        const headerColor = document.getElementById('headerColor').value;
        const buttonColor = document.getElementById('buttonColor').value;
        const backgroundColor =
          document.getElementById('backgroundColor').value;
        
        // Get new suggestion colors
        const suggestionsHeaderColor = document.getElementById('suggestionsHeaderColor').value;
        const suggestionTextColor = document.getElementById('suggestionTextColor').value;
        const suggestionCardBgColor = document.getElementById('suggestionCardBgColor').value;
        const voteButtonBgColor = document.getElementById('voteButtonBgColor').value;
        const voteButtonTextColor = document.getElementById('voteButtonTextColor').value;
        const suggestionMetaColor = document.getElementById('suggestionMetaColor').value;

        // Update preview elements
        document.getElementById('previewTitle').textContent = name;
        document.getElementById('previewDescription').textContent = description;
        document.getElementById('previewHeader').style.backgroundColor =
          headerColor;
        document.getElementById('previewButton').style.backgroundColor =
          buttonColor;

        // Update suggestions section colors
        document.getElementById('previewSuggestionsHeader').style.color = suggestionsHeaderColor;
        
        // Update suggestion cards
        document.getElementById('previewSuggestionCard1').style.backgroundColor = suggestionCardBgColor;
        
        // Update suggestion text colors
        document.getElementById('previewSuggestionTitle1').style.color = suggestionTextColor;
        document.getElementById('previewSuggestionText1').style.color = suggestionTextColor;
        
        // Update vote buttons
        document.getElementById('previewVoteButton1').style.backgroundColor = voteButtonBgColor;
        document.getElementById('previewVoteButton1').style.color = voteButtonTextColor;

        // Update meta text colors
        document.getElementById('previewSuggestionMeta1').style.color = suggestionMetaColor;
        document.getElementById('previewVoteCount1').style.color = suggestionMetaColor;

        // Update background colors (only in preview area)
        const contentSections = document.querySelectorAll(
          '#previewContent .bg-background'
        );
        contentSections.forEach(section => {
          section.style.backgroundColor = backgroundColor;
        });

        // Update icon if no logo
        const logoImg = document.getElementById('previewLogoImg');
        if (!logoImg) {
          const previewIcon = document.getElementById('previewIcon');
          if (previewIcon) {
            previewIcon.textContent = name.charAt(0).toUpperCase();
          }
        }

        // Update color text inputs
        document.getElementById('headerColorText').value = headerColor;
        document.getElementById('buttonColorText').value = buttonColor;
        document.getElementById('backgroundColorText').value = backgroundColor;
        document.getElementById('suggestionsHeaderColorText').value = suggestionsHeaderColor;
        document.getElementById('suggestionTextColorText').value = suggestionTextColor;
        document.getElementById('suggestionCardBgColorText').value = suggestionCardBgColor;
        document.getElementById('voteButtonBgColorText').value = voteButtonBgColor;
        document.getElementById('voteButtonTextColorText').value = voteButtonTextColor;
        document.getElementById('suggestionMetaColorText').value = suggestionMetaColor;
      }

      function updateColorFromText(type) {
        const textInput = document.getElementById(type + 'ColorText');
        const colorInput = document.getElementById(type + 'Color');

        // Validate hex color format
        if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
          colorInput.value = textInput.value;
          updatePreview();
        }
      }

      function applyTheme(
        headerColor,
        buttonColor,
        backgroundColor = '#F3F4F6'
      ) {
        document.getElementById('headerColor').value = headerColor;
        document.getElementById('buttonColor').value = buttonColor;
        document.getElementById('backgroundColor').value = backgroundColor;
        document.getElementById('headerColorText').value = headerColor;
        document.getElementById('buttonColorText').value = buttonColor;
        document.getElementById('backgroundColorText').value = backgroundColor;
        updatePreview();
      }

      function applyFullTheme(
        headerColor,
        buttonColor,
        backgroundColor = '#F3F4F6',
        suggestionsHeaderColor = '#111827',
        suggestionTextColor = '#374151',
        suggestionCardBgColor = '#F9FAFB',
        voteButtonBgColor = '#E5E7EB',
        voteButtonTextColor = '#374151',
        suggestionMetaColor = '#6B7280'
      ) {
        document.getElementById('headerColor').value = headerColor;
        document.getElementById('buttonColor').value = buttonColor;
        document.getElementById('backgroundColor').value = backgroundColor;
        document.getElementById('suggestionsHeaderColor').value = suggestionsHeaderColor;
        document.getElementById('suggestionTextColor').value = suggestionTextColor;
        document.getElementById('suggestionCardBgColor').value = suggestionCardBgColor;
        document.getElementById('voteButtonBgColor').value = voteButtonBgColor;
        document.getElementById('voteButtonTextColor').value = voteButtonTextColor;
        document.getElementById('suggestionMetaColor').value = suggestionMetaColor;
        
        document.getElementById('headerColorText').value = headerColor;
        document.getElementById('buttonColorText').value = buttonColor;
        document.getElementById('backgroundColorText').value = backgroundColor;
        document.getElementById('suggestionsHeaderColorText').value = suggestionsHeaderColor;
        document.getElementById('suggestionTextColorText').value = suggestionTextColor;
        document.getElementById('suggestionCardBgColorText').value = suggestionCardBgColor;
        document.getElementById('voteButtonBgColorText').value = voteButtonBgColor;
        document.getElementById('voteButtonTextColorText').value = voteButtonTextColor;
        document.getElementById('suggestionMetaColorText').value = suggestionMetaColor;
        
        updatePreview();
      }

      function handleLogoUpload() {
        const fileInput = document.getElementById('logoUpload');
        const file = fileInput.files[0];

        if (file) {
          if (file.size > 2 * 1024 * 1024) {
            // 2MB limit
            alert('File size must be less than 2MB');
            return;
          }

          // Show loading state
          const button = document.getElementById('chooseImageBtn');
          if (!button) {
            console.error('Choose Image button not found');
            alert('Upload button not found. Please try again.');
            return;
          }
          const originalText = button.innerHTML;
          button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Uploading...';
          button.disabled = true;

          // Upload via AJAX
          const formData = new FormData();
          formData.append('logo', file);
          formData.append('appId', '<%= app._id %>'); // Add app ID to the request

          fetch('/apps/api/upload-logo', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Store the logo path in hidden input
              document.getElementById('logo').value = data.logoPath;

              // Update preview
              const previewContainer = document.getElementById('previewLogoContainer');
              const logoPreviewContainer = document.getElementById('logoPreviewContainer');

              // Create image elements for both previews
              const previewImg = document.createElement('img');
              previewImg.id = 'previewLogoImg';
              previewImg.className = 'w-full h-full object-cover';
              previewImg.src = data.logoPath;

              const logoPreviewImg = document.createElement('img');
              logoPreviewImg.id = 'logoPreviewImg';
              logoPreviewImg.className = 'w-full h-full object-cover';
              logoPreviewImg.src = data.logoPath;

              // Replace existing content
              previewContainer.innerHTML = '';
              previewContainer.appendChild(previewImg);

              logoPreviewContainer.innerHTML = '';
              logoPreviewContainer.appendChild(logoPreviewImg);

              // Show remove button
              document.getElementById('removeLogo').style.display = 'inline-flex';
            } else {
              alert(data.message || 'Failed to upload logo');
            }
          })
          .catch(error => {
            console.error('Upload error:', error);
            alert('Failed to upload logo. Please try again.');
          })
          .finally(() => {
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
          });
        }
      }

      function removeAppLogo() {
        if (!confirm('Are you sure you want to remove the logo?')) {
          return;
        }

        // Show loading state
        const button = document.getElementById('removeLogo');
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Removing...';
        button.disabled = true;

        // Remove logo via API
        fetch('/apps/api/remove-logo/<%= app._id %>', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            // Reset to initial state
            const name = document.getElementById('name').value || '<%= app.name %>';
            const initial = name.charAt(0).toUpperCase();

            // Update preview
            const previewContainer = document.getElementById('previewLogoContainer');
            previewContainer.innerHTML = `<span id="previewIcon" class="text-lg font-medium text-black">${initial}</span>`;

            // Update form preview
            const logoPreviewContainer = document.getElementById('logoPreviewContainer');
            logoPreviewContainer.innerHTML = `<span id="logoPreviewText" class="text-xl font-medium text-gray-400">${initial}</span>`;

            // Clear hidden input
            document.getElementById('logo').value = '';

            // Clear file input
            document.getElementById('logoUpload').value = '';

            // Hide remove button
            button.style.display = 'none';
          } else {
            alert(data.message || 'Failed to remove logo');
          }
        })
        .catch(error => {
          console.error('Remove error:', error);
          alert('Failed to remove logo. Please try again.');
        })
        .finally(() => {
          // Restore button state
          button.innerHTML = originalText;
          button.disabled = false;
        });
      }

      function confirmDelete() {
        if (
          confirm(
            'Are you sure you want to delete this application? This action cannot be undone and will remove all suggestions and votes.'
          )
        ) {
          // Create a form to submit DELETE request
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = '/apps/<%= app._id %>?_method=DELETE';
          document.body.appendChild(form);
          form.submit();
        }
      }

      // Category management functions
      let categoryCounter = parseInt('<%= app.customCategories ? app.customCategories.length : 0 %>');

      function toggleCategoryMode() {
        const isDefault = document.getElementById('defaultCategoriesEnabled').checked;
        const customSection = document.getElementById('customCategoriesSection');
        
        if (isDefault) {
          customSection.classList.add('hidden');
        } else {
          customSection.classList.remove('hidden');
          // Add one default custom category if none exist
          if (document.querySelectorAll('.custom-category-item').length === 0) {
            addCustomCategory();
          }
        }
      }

      function addCustomCategory(name = '', color = '#6b7280') {
        const categoriesList = document.getElementById('customCategoriesList');
        const categoryId = `category_${categoryCounter++}`;
        
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'custom-category-item flex items-center space-x-3';
        categoryDiv.innerHTML = `
          <input
            type="text"
            name="customCategories[${categoryCounter-1}][name]"
            placeholder="Category name"
            value="${name}"
            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
            required />
          <input
            type="color"
            name="customCategories[${categoryCounter-1}][color]"
            value="${color}"
            class="h-10 w-16 cursor-pointer rounded-lg border border-gray-300" />
          <button
            type="button"
            onclick="removeCustomCategory(this)"
            class="flex h-8 w-8 items-center justify-center rounded-lg border border-red-300 bg-white text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
            <i class="fas fa-times text-xs"></i>
          </button>
        `;
        
        categoriesList.appendChild(categoryDiv);
      }

      function removeCustomCategory(button) {
        button.closest('.custom-category-item').remove();
      }

      // Form validation
      document
        .getElementById('appForm')
        .addEventListener('submit', function (e) {
          const name = document.getElementById('name').value.trim();
          const description = document
            .getElementById('description')
            .value.trim();

          if (!name || !description) {
            e.preventDefault();
            alert('Please fill in all required fields.');
            return;
          }

          if (name.length < 3) {
            e.preventDefault();
            alert('App name must be at least 3 characters long.');
            return;
          }

          if (description.length < 10) {
            e.preventDefault();
            alert('Description must be at least 10 characters long.');
            return;
          }
        });
    </script>
  </body>
</html>
