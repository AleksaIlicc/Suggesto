<!doctype html>
<html lang="en">
  <head>
    <title>Edit <%= app.name %> - Suggesto</title>
    <%- include('../../shared/includes/meta') %> <%-
    include('../../shared/includes/styles') %>
  </head>
  <body class="bg-background">
    <div class="flex min-h-screen flex-col items-center">
      <%- include('../../shared/partials/header') %>

      <main class="w-full max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8 w-full">
          <div class="mb-2 flex items-center space-x-4">
            <a
              href="/apps"
              class="flex items-center text-gray-600 transition-colors hover:text-gray-900">
              <i class="fas fa-arrow-left mr-2"></i>
              Back to My Apps
            </a>
          </div>
          <h1 class="text-gray-dark mb-2 text-3xl font-bold">Edit App</h1>
          <p class="text-base text-gray-600">
            Update your feedback collection app and see how it looks in
            real-time.
          </p>
        </div>

        <!-- Main Content: Form + Preview -->
        <div class="flex w-full flex-col gap-8 lg:flex-row">
          <!-- Configuration Panel -->
          <div class="w-full lg:w-1/2">
            <div
              class="rounded-2xl border border-gray-100 bg-white p-8 shadow-lg">
              <h2 class="mb-6 text-xl font-semibold text-gray-900">
                App Configuration
              </h2>

              <% if (messages.error) { %>
              <div class="mb-4 rounded-lg bg-red-50 p-4 text-red-800">
                <p><%= messages.error %></p>
              </div>
              <% } %> <% if (messages.success) { %>
              <div class="mb-4 rounded-lg bg-green-50 p-4 text-green-800">
                <p><%= messages.success %></p>
              </div>
              <% } %>

              <form
                id="appForm"
                action="/apps/<%= app._id %>?_method=PUT"
                method="post"
                class="space-y-6">
                <!-- Basic Information -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Basic Information
                  </h3>

                  <div>
                    <label
                      for="name"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      App Name *
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      required
                      value="<%= app.name %>"
                      placeholder="e.g., My Awesome App"
                      class="w-full rounded-xl border border-gray-300 px-4 py-3 transition-colors focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                      oninput="updatePreview()" />
                    <p class="mt-1 text-xs text-gray-500">
                      Choose a clear, memorable name for your feedback app
                    </p>
                  </div>

                  <div>
                    <label
                      for="description"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      Description *
                    </label>
                    <textarea
                      id="description"
                      name="description"
                      required
                      rows="3"
                      placeholder="Brief description of what feedback you're collecting..."
                      class="w-full resize-none rounded-xl border border-gray-300 px-4 py-3 transition-colors focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                      oninput="updatePreview()"><%= app.description %></textarea>
                    <p class="mt-1 text-xs text-gray-500">
                      Clearly describe what kind of suggestions or feedback you want from users
                    </p>
                  </div>
                </div>

                <!-- Logo Upload -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Logo & Branding
                  </h3>

                  <div>
                    <label
                      for="logo"
                      class="mb-2 block text-sm font-medium text-gray-700">
                      App Logo (optional)
                    </label>
                    <div class="flex items-center space-x-4">
                      <div class="flex-shrink-0">
                        <div
                          id="logoPreviewContainer"
                          class="flex h-16 w-16 items-center justify-center overflow-hidden rounded-full border-2 border-gray-200 bg-gray-100">
                          <% if (app.design?.logo) { %>
                          <img
                            id="logoPreviewImg"
                            src="<%= app.design.logo %>"
                            alt="Logo"
                            class="h-full w-full object-cover" />
                          <% } else { %>
                          <span
                            id="logoPreviewText"
                            class="text-xl font-medium text-gray-400"
                            ><%= app.name.charAt(0).toUpperCase() %></span
                          >
                          <% } %>
                        </div>
                      </div>
                      <div class="flex-1">
                        <input
                          type="file"
                          id="logoUpload"
                          accept="image/*"
                          class="hidden"
                          onchange="handleLogoUpload()" />
                        <input
                          type="hidden"
                          id="logo"
                          name="logo"
                          value="<%= app.design?.logo || '' %>" />
                        <button
                          id="chooseImageBtn"
                          type="button"
                          onclick="document.getElementById('logoUpload').click()"
                          class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-gray-200 focus:outline-none">
                          <i class="fas fa-image mr-2"></i>
                          Choose Image
                        </button>
                        <button
                          id="removeLogo"
                          type="button"
                          onclick="removeAppLogo()"
                          <% if (!app.design?.logo) { %>style="display: none"<% } %>
                          class="ml-2 inline-flex items-center rounded-lg border border-red-300 bg-white px-3 py-2 text-sm font-medium text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                          Remove
                        </button>
                      </div>
                    </div>
                    <p class="mt-1 text-xs text-gray-500">
                      Upload a logo to personalize your app (JPG, PNG, GIF up to 2MB)
                    </p>
                  </div>
                </div>

                <!-- Design Customization -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Design & Appearance
                  </h3>

                  <!-- Header Section Colors -->
                  <div class="space-y-4 rounded-lg border border-gray-100 bg-gray-50 p-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Header Section
                    </h4>
                    <p class="text-sm text-gray-600">
                      Customize the look of your app's header area where the title and description appear
                    </p>
                    
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                      <div>
                        <label
                          for="headerColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Header Background Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="headerColor"
                            name="headerColor"
                            value="<%= app.design?.headerColor %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="headerColorText"
                            value="<%= app.design?.headerColor %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('header')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          The main background color for your app's header
                        </p>
                      </div>

                      <div>
                        <label
                          for="headerTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Header Text Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="headerTextColor"
                            name="headerTextColor"
                            value="<%= app.design?.headerTextColor %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="headerTextColorText"
                            value="<%= app.design?.headerTextColor %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('headerText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for your app title and description text
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Action Buttons Colors -->
                  <div class="space-y-4 rounded-lg border border-gray-100 bg-gray-50 p-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Action Buttons
                    </h4>
                    <p class="text-sm text-gray-600">
                      Style the primary action buttons that users interact with
                    </p>
                    
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                      <div>
                        <label
                          for="buttonColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Primary Button Background
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="buttonColor"
                            name="buttonColor"
                            value="<%= app.design?.buttonColor || '#111827' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="buttonColorText"
                            value="<%= app.design?.buttonColor || '#111827' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('button')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Main action buttons like "Add Suggestion"
                        </p>
                      </div>

                      <div>
                        <label
                          for="buttonTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Primary Button Text
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="buttonTextColor"
                            name="buttonTextColor"
                            value="<%= app.design?.buttonTextColor || '#FFFFFF' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="buttonTextColorText"
                            value="<%= app.design?.buttonTextColor || '#FFFFFF' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('buttonText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Text color for primary buttons
                        </p>
                      </div>
                    </div>
                    
                    <!-- Navigation Links in separate row -->
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                      <div>
                        <label
                          for="backButtonColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Navigation Links
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="backButtonColor"
                            name="backButtonColor"
                            value="<%= app.design?.backButtonColor || '#6B7280' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="backButtonColorText"
                            value="<%= app.design?.backButtonColor || '#6B7280' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('backButton')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for back and navigation links
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Layout & Background -->
                  <div class="space-y-4 rounded-lg border border-gray-100 bg-gray-50 p-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Background & Layout
                    </h4>
                    <p class="text-sm text-gray-600">
                      Set the overall background color of your feedback app
                    </p>
                    
                    <div class="max-w-md">
                      <div>
                        <label
                          for="backgroundColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Page Background Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="backgroundColor"
                            name="backgroundColor"
                            value="<%= app.design?.backgroundColor || '#F3F4F6' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="backgroundColorText"
                            value="<%= app.design?.backgroundColor || '#F3F4F6' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('background')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Main background color behind all content
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Suggestions Section Colors -->
                  <div class="space-y-4 rounded-lg border border-gray-100 bg-gray-50 p-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Suggestions & Feedback Area
                    </h4>
                    <p class="text-sm text-gray-600">
                      Customize how user suggestions and feedback appear in your app
                    </p>
                    
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                      <div>
                        <label
                          for="suggestionsHeaderColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Section Heading Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionsHeaderColor"
                            name="suggestionsHeaderColor"
                            value="<%= app.design?.suggestionsHeaderColor || '#111827' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionsHeaderColorText"
                            value="<%= app.design?.suggestionsHeaderColor || '#111827' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionsHeader')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for "Recent Suggestions" and section headings
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionCardBgColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestion Card Background
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionCardBgColor"
                            name="suggestionCardBgColor"
                            value="<%= app.design?.suggestionCardBgColor || '#F9FAFB' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionCardBgColorText"
                            value="<%= app.design?.suggestionCardBgColor || '#F9FAFB' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionCardBg')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Background color for individual suggestion cards
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Suggestion Text Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionTextColor"
                            name="suggestionTextColor"
                            value="<%= app.design?.suggestionTextColor || '#374151' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionTextColorText"
                            value="<%= app.design?.suggestionTextColor || '#374151' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Main text color for suggestion titles and content
                        </p>
                      </div>

                      <div>
                        <label
                          for="suggestionMetaColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Meta Information Color
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="suggestionMetaColor"
                            name="suggestionMetaColor"
                            value="<%= app.design?.suggestionMetaColor || '#6B7280' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="suggestionMetaColorText"
                            value="<%= app.design?.suggestionMetaColor || '#6B7280' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('suggestionMeta')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for author names, dates, and other metadata
                        </p>
                      </div>

                      <div>
                        <label
                          for="voteButtonBgColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Vote Button Background
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="voteButtonBgColor"
                            name="voteButtonBgColor"
                            value="<%= app.design?.voteButtonBgColor || '#E5E7EB' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="voteButtonBgColorText"
                            value="<%= app.design?.voteButtonBgColor || '#E5E7EB' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('voteButtonBg')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Background color for voting buttons (upvote/downvote)
                        </p>
                      </div>

                      <div>
                        <label
                          for="voteButtonTextColor"
                          class="mb-2 block text-sm font-medium text-gray-700">
                          Vote Button Text & Icons
                        </label>
                        <div class="flex items-center space-x-3">
                          <input
                            type="color"
                            id="voteButtonTextColor"
                            name="voteButtonTextColor"
                            value="<%= app.design?.voteButtonTextColor || '#374151' %>"
                            class="h-12 w-12 cursor-pointer rounded-lg border border-gray-300"
                            onchange="updatePreview()" />
                          <input
                            type="text"
                            id="voteButtonTextColorText"
                            value="<%= app.design?.voteButtonTextColor || '#374151' %>"
                            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                            oninput="updateColorFromText('voteButtonText')" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                          Color for vote button text and vote count numbers
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Preset Color Themes -->
                  <div class="space-y-4 rounded-lg border border-gray-100 bg-gray-50 p-4">
                    <h4 class="text-base font-medium text-gray-800">
                      Pre-designed Themes
                    </h4>
                    <p class="text-sm text-gray-600">
                      Quick-start with professionally designed color combinations, or customize each color individually above
                    </p>
                    
                    <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
                      <button
                        type="button"
                        onclick="applyFullTheme('#374151', '#111827', '#F3F4F6', '#111827', '#374151', '#F9FAFB', '#E5E7EB', '#374151', '#6B7280')"
                        class="flex flex-col items-center space-y-2 rounded-lg border border-gray-300 p-4 transition-all hover:border-gray-400 hover:bg-white">
                        <div class="flex space-x-1">
                          <div class="h-3 w-3 rounded-sm bg-gray-600"></div>
                          <div class="h-3 w-3 rounded-sm bg-gray-800"></div>
                          <div class="h-3 w-3 rounded-sm bg-gray-100"></div>
                        </div>
                        <span class="text-xs font-medium">Classic Gray</span>
                        <span class="text-xs text-gray-500">Professional & clean</span>
                      </button>
                      
                      <button
                        type="button"
                        onclick="applyFullTheme('#5E81AC', '#2E3440', '#ECEFF4', '#2E3440', '#4C566A', '#F9FBFF', '#D8DEE9', '#2E3440', '#8891A4')"
                        class="flex flex-col items-center space-y-2 rounded-lg border border-gray-300 p-4 transition-all hover:border-gray-400 hover:bg-white">
                        <div class="flex space-x-1">
                          <div class="h-3 w-3 rounded-sm bg-[#5E81AC]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#2E3440]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#ECEFF4]"></div>
                        </div>
                        <span class="text-xs font-medium">Ocean Blue</span>
                        <span class="text-xs text-gray-500">Calm & trustworthy</span>
                      </button>
                      
                      <button
                        type="button"
                        onclick="applyFullTheme('#6DB56D', '#3E4E3E', '#F3F8F2', '#3E4E3E', '#5A6B5A', '#F8FBF8', '#E8F4E8', '#3E4E3E', '#9CA3AF')"
                        class="flex flex-col items-center space-y-2 rounded-lg border border-gray-300 p-4 transition-all hover:border-gray-400 hover:bg-white">
                        <div class="flex space-x-1">
                          <div class="h-3 w-3 rounded-sm bg-[#6DB56D]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#3E4E3E]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#F3F8F2]"></div>
                        </div>
                        <span class="text-xs font-medium">Nature Green</span>
                        <span class="text-xs text-gray-500">Organic & fresh</span>
                      </button>
                      
                      <button
                        type="button"
                        onclick="applyFullTheme('#2d6da9', '#1f477e', '#e2e7e8', '#1f477e', '#4a6ba3', '#f0f4f7', '#d1dde6', '#1f477e', '#78909C')"
                        class="flex flex-col items-center space-y-2 rounded-lg border border-gray-300 p-4 transition-all hover:border-gray-400 hover:bg-white">
                        <div class="flex space-x-1">
                          <div class="h-3 w-3 rounded-sm bg-[#2d6da9]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#1f477e]"></div>
                          <div class="h-3 w-3 rounded-sm bg-[#e2e7e8]"></div>
                        </div>
                        <span class="text-xs font-medium">Sky Blue</span>
                        <span class="text-xs text-gray-500">Tech & modern</span>
                      </button>
                    </div>
                    
                    <div class="text-center">
                      <p class="text-xs text-gray-500">
                        Click any theme to instantly apply all colors, then fine-tune individual colors above
                      </p>
                    </div>
                  </div>
                </div>

                <!-- Categories Configuration -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Categories Configuration
                  </h3>

                  <!-- Category Toggle -->
                  <div class="space-y-1">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="defaultCategoriesEnabled"
                        name="defaultCategoriesEnabled"
                        value="true"
                        <%= app.defaultCategoriesEnabled ? 'checked' : '' %>
                        class="h-4 w-4 text-gray-dark bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                        onchange="toggleCategoryMode()" />
                      <label
                        for="defaultCategoriesEnabled"
                        class="text-sm font-medium text-gray-700">
                        Use default categories (bug, feature, improvement, other)
                      </label>
                    </div>
                    <p class="text-xs text-gray-500 ml-7">
                      Uncheck to create your own custom categories
                    </p>
                  </div>

                  <!-- Custom Categories Section -->
                  <div id="customCategoriesSection" class="<%= app.defaultCategoriesEnabled ? 'hidden' : '' %> space-y-3">
                    <label class="block text-sm font-medium text-gray-700">
                      Custom Categories
                    </label>
                    <div id="customCategoriesList" class="space-y-2">
                      <% if (app.customCategories && app.customCategories.length > 0) { %>
                        <% app.customCategories.forEach((category, index) => { %>
                          <div class="custom-category-item flex items-center space-x-3">
                            <input
                              type="text"
                              name="customCategories[<%= index %>][name]"
                              placeholder="Category name"
                              value="<%= category.name %>"
                              class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
                              required 
                              oninput="updateCategoriesPreview()" />
                            <input
                              type="color"
                              name="customCategories[<%= index %>][color]"
                              value="<%= category.color %>"
                              class="h-10 w-16 cursor-pointer rounded-lg border border-gray-300"
                              onchange="updateCategoriesPreview()" />
                            <button
                              type="button"
                              onclick="removeCustomCategory(this)"
                              class="flex h-8 w-8 items-center justify-center rounded-lg border border-red-300 bg-white text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                              <i class="fas fa-times text-xs"></i>
                            </button>
                          </div>
                        <% }); %>
                      <% } %>
                    </div>
                    <button
                      type="button"
                      onclick="addCustomCategory()"
                      class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:ring-2 focus:ring-gray-200 focus:outline-none">
                      <i class="fas fa-plus mr-2"></i>
                      Add Category
                    </button>
                  </div>
                </div>

                <!-- Privacy & Access Settings -->
                <div class="space-y-4">
                  <h3
                    class="border-b border-gray-200 pb-2 text-lg font-medium text-gray-900">
                    Privacy & Access Settings
                  </h3>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="isPublic"
                        name="isPublic"
                        value="true"
                        <%= app.isPublic !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="isPublic"
                        class="text-sm font-medium text-gray-700">
                        Make app publicly visible
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only you can view and access the app
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="allowAnonymousVotes"
                        name="allowAnonymousVotes"
                        value="true"
                        <%= app.allowAnonymousVotes !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="allowAnonymousVotes"
                        class="text-sm font-medium text-gray-700">
                        Allow anonymous voting
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only signed-in users can vote on suggestions
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="allowPublicSubmissions"
                        name="allowPublicSubmissions"
                        value="true"
                        <%= app.allowPublicSubmissions !== false ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500" />
                      <label
                        for="allowPublicSubmissions"
                        class="text-sm font-medium text-gray-700">
                        Allow public submissions
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      When unchecked, only signed-in users can submit suggestions
                    </p>
                  </div>

                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="enablePublicRoadmap"
                        name="enablePublicRoadmap"
                        value="true"
                        <%= app.enablePublicRoadmap === true ? 'checked' : '' %>
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500"
                        onchange="toggleRoadmapPreview()" />
                      <label
                        for="enablePublicRoadmap"
                        class="text-sm font-medium text-gray-700">
                        Enable public roadmap
                      </label>
                    </div>
                    <p class="ml-7 text-xs text-gray-500">
                      Allow users to see your development roadmap and progress
                    </p>
                  </div>
                </div>

                <!-- Submit Button -->
                <div class="pt-4">
                  <div class="flex space-x-4">
                    <button
                      type="submit"
                      class="bg-gray-dark hover:bg-gray-light flex-1 rounded-xl px-6 py-3 font-medium text-white shadow-lg transition-all duration-200 hover:shadow-xl">
                      Save Changes
                    </button>
                    <a
                      href="/apps/<%= app._id %>"
                      class="hover:border-gray-dark text-gray-dark flex flex-1 items-center justify-center rounded-xl border-2 border-gray-300 px-6 py-3 text-center font-medium transition-all duration-200">
                      Cancel
                    </a>
                  </div>
                </div>
              </form>

              <!-- Danger Zone -->
              <div class="mt-8 border-t border-red-200 pt-8">
                <h3 class="mb-4 text-lg font-medium text-red-600">
                  Danger Zone
                </h3>
                <p class="mb-4 text-sm text-gray-600">
                  Deleting this application will permanently remove all
                  suggestions, votes, and related data. This action cannot be
                  undone.
                </p>
                <button
                  onclick="confirmDelete()"
                  class="inline-flex items-center rounded-lg border border-red-300 bg-white px-4 py-2 text-sm font-medium text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
                  <i class="fas fa-trash mr-2 h-4 w-4"></i>
                  Delete Application
                </button>
              </div>
            </div>
          </div>

          <!-- Live Preview Panel -->
          <div class="w-full lg:w-1/2">
            <div class="sticky top-8">
              <div
                class="overflow-hidden rounded-2xl border border-gray-100 bg-white shadow-lg">
                <div class="border-b border-gray-200 bg-gray-100 px-4 py-3">
                  <div class="flex items-center space-x-2">
                    <div class="h-3 w-3 rounded-full bg-red-400"></div>
                    <div class="h-3 w-3 rounded-full bg-yellow-400"></div>
                    <div class="h-3 w-3 rounded-full bg-green-400"></div>
                    <div class="flex-1 text-center">
                      <span class="font-mono text-xs text-gray-500"
                        >Preview</span
                      >
                    </div>
                  </div>
                </div>

                <!-- Preview Content -->
                <div id="previewContent" class="min-h-[600px]">
                  <!-- Header Section (more accurate to app.ejs) -->
                  <div
                    id="previewHeader"
                    class="flex justify-center p-6 shadow-sm sm:px-28 sm:py-14">
                    <div class="flex w-full max-w-xl flex-col justify-center space-y-3">
                      <div class="flex items-center space-x-4">
                        <div
                          id="previewLogoContainer"
                          class="flex h-10 w-10 items-center justify-center rounded-full bg-white">
                          <% if (app.design?.logo) { %>
                          <img
                            id="previewLogoImg"
                            src="<%= app.design.logo %>"
                            alt="<%= app.name %>"
                            class="h-full w-full rounded-full object-cover" />
                          <% } else { %>
                          <span
                            id="previewIcon"
                            class="text-lg font-medium text-black"
                            ><%= app.name.charAt(0).toUpperCase() %></span
                          >
                          <% } %>
                        </div>
                        <h1
                          id="previewTitle"
                          class="text-lg font-medium sm:text-xl">
                          <%= app.name %>
                        </h1>
                      </div>

                      <p
                        id="previewDescription"
                        class="max-w-2xl text-sm sm:text-base">
                        <%= app.description %>
                      </p>
                    </div>
                  </div>

                  <!-- Main Content Section -->
                  <main id="previewMain" class="mx-auto flex justify-center p-6 sm:px-28 sm:py-8">
                    <div class="w-full max-w-xl">
                      <div class="mb-4 w-full sm:mb-6">
                        <div class="flex flex-col space-y-3 sm:flex-row sm:space-x-3 sm:space-y-0">
                          <button
                            id="previewAddSuggestionBtn"
                            class="cursor-pointer rounded-xl px-6 py-3 text-base transition-all hover:opacity-90 active:scale-95">
                            Add Suggestion
                          </button>
                          <button
                            id="previewViewRoadmapBtn"
                            class="cursor-pointer rounded-xl px-6 py-3 text-base transition-all hover:opacity-90 active:scale-95"
                            <% if (app.enablePublicRoadmap !== true) { %>style="display: none;"<% } %>>
                            View Roadmap
                          </button>
                        </div>
                      </div>

                      <!-- Back Button Preview -->
                      <div class="mb-4">
                        <button
                          id="previewBackBtn"
                          class="flex items-center text-sm transition-colors hover:opacity-80">
                          <i class="fas fa-arrow-left mr-2"></i>
                          Back Button (Preview)
                        </button>
                      </div>

                       <!-- Categories Preview -->
                      <div class="mb-6">
                        <div class="mb-3 flex items-center justify-between">
                          <h3 class="text-sm font-medium text-gray-600">Available Categories (Preview)</h3>
                        </div>
                        <div id="previewCategoriesContainer" class="flex flex-wrap gap-2">
                          <!-- Categories will be dynamically inserted here -->
                        </div>
                      </div>

                      <!-- Suggestions Header with Dropdown -->
                      <div class="mb-6 flex items-center justify-between">
                        <h2 id="previewSuggestionsHeader" class="text-xl font-semibold flex items-center">
                          Showing 
                          <select id="previewSelectDropdown" class="mx-2 px-3 py-1 rounded-md border-b border-gray-300 text-xl font-semibold cursor-pointer focus:outline-none">
                            <option value="top">Top</option>
                            <option value="trending">Trending</option>
                            <option value="new">New</option>
                          </select>
                          suggestions
                        </h2>
                      </div>

                      <!-- Sample Suggestions -->
                      <div class="w-full space-y-4">
                        <div id="previewSuggestionCard1" class="rounded-xl p-4 shadow-sm sm:p-6">
                          <div class="mb-3 flex flex-wrap items-center gap-2">
                            <!-- Category Badge -->
                            <span id="previewSuggestionCategory1" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white bg-blue-500">
                              Feature
                            </span>
                            
                            <span id="previewSuggestionMeta1" class="text-xs">
                              by John Doe • Dec 15, 2024
                            </span>
                          </div>
                          
                          <div class="flex flex-col space-y-2 space-x-0 sm:flex-row sm:items-start sm:justify-between sm:space-y-0 sm:space-x-4">
                            <div class="flex-1">
                              <h3 id="previewSuggestionTitle1" class="text-base font-medium sm:text-lg mb-2">
                                Add dark mode support
                              </h3>
                              <p id="previewSuggestionText1" class="text-sm sm:text-base mb-3">
                                Would love to have a dark theme option for better user experience during night time usage.
                              </p>
                            </div>
                            
                            <div class="flex items-center justify-end space-x-3">
                              <!-- Vote Button -->
                              <div class="flex space-x-2">
                                <button id="previewVoteButton1" class="flex items-center cursor-pointer space-x-2 rounded-lg p-2 transition-all hover:opacity-90 active:scale-95">
                                  <i class="fas fa-chevron-up text-md"></i>
                                  <p id="previewVoteCount1" class="text-sm font-medium sm:text-base">23</p>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div id="previewSuggestionCard2" class="rounded-xl p-4 shadow-sm sm:p-6">
                          <div class="mb-3 flex flex-wrap items-center gap-2">
                            <!-- Category Badge -->
                            <span id="previewSuggestionCategory2" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white bg-green-500">
                              Improvement
                            </span>
                            
                            <span id="previewSuggestionMeta2" class="text-xs">
                              by Jane Smith • Dec 14, 2024
                            </span>
                          </div>
                          
                          <div class="flex flex-col space-y-2 space-x-0 sm:flex-row sm:items-start sm:justify-between sm:space-y-0 sm:space-x-4">
                            <div class="flex-1">
                              <h3 id="previewSuggestionTitle2" class="text-base font-medium sm:text-lg mb-2">
                                Improve mobile responsiveness
                              </h3>
                              <p id="previewSuggestionText2" class="text-sm sm:text-base mb-3">
                                The current mobile layout could be optimized for better touch interactions and readability.
                              </p>
                            </div>
                            
                            <div class="flex items-center justify-end space-x-3">
                              <!-- Vote Button -->
                              <div class="flex space-x-2">
                                <button id="previewVoteButton2" class="flex items-center cursor-pointer space-x-2 rounded-lg p-2 transition-all hover:opacity-90 active:scale-95">
                                  <i class="fas fa-chevron-up text-md"></i>
                                  <p id="previewVoteCount2" class="text-sm font-medium sm:text-base">15</p>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </main>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <%- include('../../shared/includes/scripts') %>

    <script>
      // Initialize preview on page load
      document.addEventListener('DOMContentLoaded', function () {
        // Set initial colors from server-side values
        const headerColor = '<%= app.design?.headerColor %>';
        const headerTextColor = '<%= app.design?.headerTextColor %>';
        const buttonColor = '<%= app.design?.buttonColor %>';
        const buttonTextColor = '<%= app.design?.buttonTextColor %>';
        const backButtonColor = '<%= app.design?.backButtonColor %>';
        const backgroundColor = '<%= app.design?.backgroundColor %>';
        const suggestionsHeaderColor = '<%= app.design?.suggestionsHeaderColor %>';
        const suggestionTextColor = '<%= app.design?.suggestionTextColor %>';
        const suggestionCardBgColor = '<%= app.design?.suggestionCardBgColor %>';
        const voteButtonBgColor = '<%= app.design?.voteButtonBgColor %>';
        const voteButtonTextColor = '<%= app.design?.voteButtonTextColor %>';
        const suggestionMetaColor = '<%= app.design?.suggestionMetaColor %>';

        // Apply initial colors to preview
        const previewHeader = document.getElementById('previewHeader');
        const previewTitle = document.getElementById('previewTitle');
        const previewDescription = document.getElementById('previewDescription');
        const previewMain = document.getElementById('previewMain');
        const previewAddSuggestionBtn = document.getElementById('previewAddSuggestionBtn');
        const previewViewRoadmapBtn = document.getElementById('previewViewRoadmapBtn');
        const previewBackBtn = document.getElementById('previewBackBtn');
        const previewSuggestionsHeader = document.getElementById('previewSuggestionsHeader');
        const previewSelectDropdown = document.getElementById('previewSelectDropdown');

        // Apply header colors
        if (previewHeader) previewHeader.style.backgroundColor = headerColor;
        if (previewTitle) previewTitle.style.color = headerTextColor;
        if (previewDescription) previewDescription.style.color = headerTextColor;

        // Apply button colors
        if (previewAddSuggestionBtn) {
          previewAddSuggestionBtn.style.backgroundColor = buttonColor;
          previewAddSuggestionBtn.style.color = buttonTextColor;
        }
        if (previewViewRoadmapBtn) {
          previewViewRoadmapBtn.style.backgroundColor = buttonColor;
          previewViewRoadmapBtn.style.color = buttonTextColor;
        }

        // Apply other colors
        if (previewBackBtn) previewBackBtn.style.color = backButtonColor;
        if (previewMain) previewMain.style.backgroundColor = backgroundColor;
        if (previewSuggestionsHeader) previewSuggestionsHeader.style.color = suggestionsHeaderColor;
        if (previewSelectDropdown) {
          previewSelectDropdown.style.color = suggestionsHeaderColor;
          previewSelectDropdown.style.backgroundColor = backgroundColor;
        }

        // Apply suggestion card colors
        const previewSuggestionCard1 = document.getElementById('previewSuggestionCard1');
        const previewSuggestionCard2 = document.getElementById('previewSuggestionCard2');
        if (previewSuggestionCard1) previewSuggestionCard1.style.backgroundColor = suggestionCardBgColor;
        if (previewSuggestionCard2) previewSuggestionCard2.style.backgroundColor = suggestionCardBgColor;

        // Apply suggestion text colors
        const previewSuggestionTitle1 = document.getElementById('previewSuggestionTitle1');
        const previewSuggestionText1 = document.getElementById('previewSuggestionText1');
        const previewSuggestionTitle2 = document.getElementById('previewSuggestionTitle2');
        const previewSuggestionText2 = document.getElementById('previewSuggestionText2');
        
        if (previewSuggestionTitle1) previewSuggestionTitle1.style.color = suggestionTextColor;
        if (previewSuggestionText1) previewSuggestionText1.style.color = suggestionTextColor;
        if (previewSuggestionTitle2) previewSuggestionTitle2.style.color = suggestionTextColor;
        if (previewSuggestionText2) previewSuggestionText2.style.color = suggestionTextColor;

        // Apply meta text colors
        const previewSuggestionMeta1 = document.getElementById('previewSuggestionMeta1');
        const previewSuggestionMeta2 = document.getElementById('previewSuggestionMeta2');
        if (previewSuggestionMeta1) previewSuggestionMeta1.style.color = suggestionMetaColor;
        if (previewSuggestionMeta2) previewSuggestionMeta2.style.color = suggestionMetaColor;

        // Apply vote button colors
        const previewVoteButton1 = document.getElementById('previewVoteButton1');
        const previewVoteButton2 = document.getElementById('previewVoteButton2');
        const previewVoteCount1 = document.getElementById('previewVoteCount1');
        const previewVoteCount2 = document.getElementById('previewVoteCount2');
        
        if (previewVoteButton1) {
          previewVoteButton1.style.backgroundColor = voteButtonBgColor;
          previewVoteButton1.style.color = voteButtonTextColor;
        }
        if (previewVoteButton2) {
          previewVoteButton2.style.backgroundColor = voteButtonBgColor;
          previewVoteButton2.style.color = voteButtonTextColor;
        }
        if (previewVoteCount1) previewVoteCount1.style.color = voteButtonTextColor;
        if (previewVoteCount2) previewVoteCount2.style.color = voteButtonTextColor;

        updatePreview();
        // Initialize categories preview
        updateCategoriesPreview();
        // Initialize roadmap button visibility
        toggleRoadmapPreview();
      });

      function updateColorFromText(type) {
        const textInput = document.getElementById(type + 'ColorText');
        const colorInput = document.getElementById(type + 'Color');

        // Validate hex color format
        if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
          colorInput.value = textInput.value;
          updatePreview();
        }
      }

      function toggleRoadmapPreview() {
        const enablePublicRoadmapCheckbox = document.getElementById('enablePublicRoadmap');
        const previewViewRoadmapBtn = document.getElementById('previewViewRoadmapBtn');

        if (enablePublicRoadmapCheckbox && previewViewRoadmapBtn) {
          if (enablePublicRoadmapCheckbox.checked) {
            previewViewRoadmapBtn.style.display = 'block';
          } else {
            previewViewRoadmapBtn.style.display = 'none';
          }
        }
      }

      function updatePreview() {
        // Update text content
        const nameEl = document.getElementById('name');
        const descEl = document.getElementById('description');

        const name = nameEl ? nameEl.value || '<%= app.name %>' : '<%= app.name %>';
        const description = descEl ? descEl.value || '<%= app.description %>' : '<%= app.description %>';

        // Update preview text elements
        const previewTitle = document.getElementById('previewTitle');
        const previewDescription = document.getElementById('previewDescription');
        
        if (previewTitle) previewTitle.textContent = name;
        if (previewDescription) previewDescription.textContent = description;

        // Update icon if no logo
        const logoImg = document.getElementById('previewLogoImg');
        if (!logoImg) {
          const previewIcon = document.getElementById('previewIcon');
          if (previewIcon) {
            previewIcon.textContent = name.charAt(0).toUpperCase();
          }
        }

        // Get current color values from form inputs
        const headerColor = document.getElementById('headerColor')?.value;
        const headerTextColor = document.getElementById('headerTextColor')?.value;
        const buttonColor = document.getElementById('buttonColor')?.value;
        const buttonTextColor = document.getElementById('buttonTextColor')?.value;
        const backButtonColor = document.getElementById('backButtonColor')?.value;
        const backgroundColor = document.getElementById('backgroundColor')?.value;
        const suggestionsHeaderColor = document.getElementById('suggestionsHeaderColor')?.value;
        const suggestionTextColor = document.getElementById('suggestionTextColor')?.value;
        const suggestionCardBgColor = document.getElementById('suggestionCardBgColor')?.value;
        const voteButtonBgColor = document.getElementById('voteButtonBgColor')?.value;
        const voteButtonTextColor = document.getElementById('voteButtonTextColor')?.value;
        const suggestionMetaColor = document.getElementById('suggestionMetaColor')?.value;

        // Apply header colors
        const previewHeader = document.getElementById('previewHeader');
        if (previewHeader && headerColor) previewHeader.style.backgroundColor = headerColor;
        if (previewTitle && headerTextColor) previewTitle.style.color = headerTextColor;
        if (previewDescription && headerTextColor) previewDescription.style.color = headerTextColor;

        // Apply button colors
        const previewAddSuggestionBtn = document.getElementById('previewAddSuggestionBtn');
        const previewViewRoadmapBtn = document.getElementById('previewViewRoadmapBtn');
        if (previewAddSuggestionBtn && buttonColor) {
          previewAddSuggestionBtn.style.backgroundColor = buttonColor;
          previewAddSuggestionBtn.style.color = buttonTextColor;
        }
        if (previewViewRoadmapBtn && buttonColor) {
          previewViewRoadmapBtn.style.backgroundColor = buttonColor;
          previewViewRoadmapBtn.style.color = buttonTextColor;
        }

        // Apply back button color
        const previewBackBtn = document.getElementById('previewBackBtn');
        if (previewBackBtn && backButtonColor) previewBackBtn.style.color = backButtonColor;

        // Apply main background
        const previewMain = document.getElementById('previewMain');
        if (previewMain && backgroundColor) previewMain.style.backgroundColor = backgroundColor;

        // Apply suggestions header color
        const previewSuggestionsHeader = document.getElementById('previewSuggestionsHeader');
        const previewSelectDropdown = document.getElementById('previewSelectDropdown');
        if (previewSuggestionsHeader && suggestionsHeaderColor) previewSuggestionsHeader.style.color = suggestionsHeaderColor;
        if (previewSelectDropdown) {
          if (suggestionsHeaderColor) previewSelectDropdown.style.color = suggestionsHeaderColor;
          if (backgroundColor) previewSelectDropdown.style.backgroundColor = backgroundColor;
        }

        // Apply suggestion card colors
        const previewSuggestionCard1 = document.getElementById('previewSuggestionCard1');
        const previewSuggestionCard2 = document.getElementById('previewSuggestionCard2');
        if (previewSuggestionCard1 && suggestionCardBgColor) previewSuggestionCard1.style.backgroundColor = suggestionCardBgColor;
        if (previewSuggestionCard2 && suggestionCardBgColor) previewSuggestionCard2.style.backgroundColor = suggestionCardBgColor;

        // Apply suggestion text colors
        const previewSuggestionTitle1 = document.getElementById('previewSuggestionTitle1');
        const previewSuggestionText1 = document.getElementById('previewSuggestionText1');
        const previewSuggestionTitle2 = document.getElementById('previewSuggestionTitle2');
        const previewSuggestionText2 = document.getElementById('previewSuggestionText2');
        
        if (previewSuggestionTitle1 && suggestionTextColor) previewSuggestionTitle1.style.color = suggestionTextColor;
        if (previewSuggestionText1 && suggestionTextColor) previewSuggestionText1.style.color = suggestionTextColor;
        if (previewSuggestionTitle2 && suggestionTextColor) previewSuggestionTitle2.style.color = suggestionTextColor;
        if (previewSuggestionText2 && suggestionTextColor) previewSuggestionText2.style.color = suggestionTextColor;

        // Apply meta text colors
        const previewSuggestionMeta1 = document.getElementById('previewSuggestionMeta1');
        const previewSuggestionMeta2 = document.getElementById('previewSuggestionMeta2');
        if (previewSuggestionMeta1 && suggestionMetaColor) previewSuggestionMeta1.style.color = suggestionMetaColor;
        if (previewSuggestionMeta2 && suggestionMetaColor) previewSuggestionMeta2.style.color = suggestionMetaColor;

        // Apply vote button colors
        const previewVoteButton1 = document.getElementById('previewVoteButton1');
        const previewVoteButton2 = document.getElementById('previewVoteButton2');
        const previewVoteCount1 = document.getElementById('previewVoteCount1');
        const previewVoteCount2 = document.getElementById('previewVoteCount2');
        
        if (previewVoteButton1) {
          if (voteButtonBgColor) previewVoteButton1.style.backgroundColor = voteButtonBgColor;
          if (voteButtonTextColor) previewVoteButton1.style.color = voteButtonTextColor;
        }
        if (previewVoteButton2) {
          if (voteButtonBgColor) previewVoteButton2.style.backgroundColor = voteButtonBgColor;
          if (voteButtonTextColor) previewVoteButton2.style.color = voteButtonTextColor;
        }
        if (previewVoteCount1 && voteButtonTextColor) previewVoteCount1.style.color = voteButtonTextColor;
        if (previewVoteCount2 && voteButtonTextColor) previewVoteCount2.style.color = voteButtonTextColor;

        // Update categories preview
        updateCategoriesPreview();
      }

      function updateCategoriesPreview() {
        const container = document.getElementById('previewCategoriesContainer');
        if (!container) return;

        // Clear existing categories
        container.innerHTML = '';

        const isDefaultCategories = document.getElementById('defaultCategoriesEnabled')?.checked;
        let availableCategories = [];

        if (isDefaultCategories) {
          // Show default categories
          const defaultCategories = [
            { name: 'Bug', color: '#EF4444' },
            { name: 'Feature', color: '#3B82F6' },
            { name: 'Improvement', color: '#10B981' },
            { name: 'Other', color: '#6B7280' }
          ];

          availableCategories = defaultCategories;

          defaultCategories.forEach(category => {
            const badge = document.createElement('span');
            badge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white';
            badge.style.backgroundColor = category.color;
            badge.textContent = category.name;
            container.appendChild(badge);
          });
        } else {
          // Show custom categories
          const customCategoryInputs = document.querySelectorAll('.custom-category-item');
          
          if (customCategoryInputs.length === 0) {
            // Show placeholder if no custom categories
            const placeholder = document.createElement('span');
            placeholder.className = 'text-xs text-gray-400 italic';
            placeholder.textContent = 'Add custom categories to see preview';
            container.appendChild(placeholder);
          } else {
            customCategoryInputs.forEach(categoryItem => {
              const nameInput = categoryItem.querySelector('input[type="text"]');
              const colorInput = categoryItem.querySelector('input[type="color"]');
              
              if (nameInput && colorInput && nameInput.value.trim()) {
                const category = { name: nameInput.value.trim(), color: colorInput.value };
                availableCategories.push(category);

                const badge = document.createElement('span');
                badge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white';
                badge.style.backgroundColor = category.color;
                badge.textContent = category.name;
                container.appendChild(badge);
              }
            });
          }
        }

        // Update suggestion card categories
        updateSuggestionCardCategories(availableCategories);
      }

      function updateSuggestionCardCategories(availableCategories) {
        if (!availableCategories || availableCategories.length === 0) {
          return;
        }

        // Update first suggestion card
        const suggestionCard1Badge = document.getElementById('previewSuggestionCategory1');
        if (suggestionCard1Badge && availableCategories[0]) {
          suggestionCard1Badge.style.backgroundColor = availableCategories[0].color;
          suggestionCard1Badge.textContent = availableCategories[0].name;
        }

        // Update second suggestion card  
        const suggestionCard2Badge = document.getElementById('previewSuggestionCategory2');
        if (suggestionCard2Badge && availableCategories.length > 1) {
          suggestionCard2Badge.style.backgroundColor = availableCategories[1].color;
          suggestionCard2Badge.textContent = availableCategories[1].name;
        } else if (suggestionCard2Badge && availableCategories[0]) {
          // Use first category if only one available
          suggestionCard2Badge.style.backgroundColor = availableCategories[0].color;
          suggestionCard2Badge.textContent = availableCategories[0].name;
        }
      }

      function updateColorFromText(type) {
        const textInput = document.getElementById(type + 'ColorText');
        const colorInput = document.getElementById(type + 'Color');

        if (!textInput || !colorInput) return;

        // Validate hex color format
        if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
          colorInput.value = textInput.value;
          updatePreview();
        }
      }

      function applyTheme(
        headerColor,
        buttonColor,
        backgroundColor = '#F3F4F6'
      ) {
        const safeSetValue = (id, value) => {
          const element = document.getElementById(id);
          if (element) element.value = value;
        };

        safeSetValue('headerColor', headerColor);
        safeSetValue('buttonColor', buttonColor);
        safeSetValue('backgroundColor', backgroundColor);
        safeSetValue('headerColorText', headerColor);
        safeSetValue('buttonColorText', buttonColor);
        safeSetValue('backgroundColorText', backgroundColor);
        updatePreview();
      }

      function applyFullTheme(
        headerColor,
        buttonColor,
        backgroundColor,
        suggestionsHeaderColor,
        suggestionTextColor,
        suggestionCardBgColor,
        voteButtonBgColor,
        voteButtonTextColor,
        suggestionMetaColor
      ) {
        const safeSetValue = (id, value) => {
          const element = document.getElementById(id);
          if (element) element.value = value;
        };

        safeSetValue('headerColor', headerColor);
        safeSetValue('buttonColor', buttonColor);
        safeSetValue('backgroundColor', backgroundColor);
        safeSetValue('suggestionsHeaderColor', suggestionsHeaderColor);
        safeSetValue('suggestionTextColor', suggestionTextColor);
        safeSetValue('suggestionCardBgColor', suggestionCardBgColor);
        safeSetValue('voteButtonBgColor', voteButtonBgColor);
        safeSetValue('voteButtonTextColor', voteButtonTextColor);
        safeSetValue('suggestionMetaColor', suggestionMetaColor);
        
        safeSetValue('headerColorText', headerColor);
        safeSetValue('buttonColorText', buttonColor);
        safeSetValue('backgroundColorText', backgroundColor);
        safeSetValue('suggestionsHeaderColorText', suggestionsHeaderColor);
        safeSetValue('suggestionTextColorText', suggestionTextColor);
        safeSetValue('suggestionCardBgColorText', suggestionCardBgColor);
        safeSetValue('voteButtonBgColorText', voteButtonBgColor);
        safeSetValue('voteButtonTextColorText', voteButtonTextColor);
        safeSetValue('suggestionMetaColorText', suggestionMetaColor);
        
        updatePreview();
      }

      function handleLogoUpload() {
        const fileInput = document.getElementById('logoUpload');
        const file = fileInput.files[0];

        if (file) {
          if (file.size > 2 * 1024 * 1024) {
            // 2MB limit
            alert('File size must be less than 2MB');
            return;
          }

          // Show loading state
          const button = document.getElementById('chooseImageBtn');
          if (!button) {
            console.error('Choose Image button not found');
            alert('Upload button not found. Please try again.');
            return;
          }
          const originalText = button.innerHTML;
          button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Uploading...';
          button.disabled = true;

          // Upload via AJAX
          const formData = new FormData();
          formData.append('logo', file);
          formData.append('appId', '<%= app._id %>'); // Add app ID to the request

          fetch('/apps/api/upload-logo', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Store the logo path in hidden input
              document.getElementById('logo').value = data.logoPath;

              // Update preview
              const previewContainer = document.getElementById('previewLogoContainer');
              const logoPreviewContainer = document.getElementById('logoPreviewContainer');

              // Create image elements for both previews
              const previewImg = document.createElement('img');
              previewImg.id = 'previewLogoImg';
              previewImg.className = 'w-full h-full object-cover';
              previewImg.src = data.logoPath;

              const logoPreviewImg = document.createElement('img');
              logoPreviewImg.id = 'logoPreviewImg';
              logoPreviewImg.className = 'w-full h-full object-cover';
              logoPreviewImg.src = data.logoPath;

              // Replace existing content
              previewContainer.innerHTML = '';
              previewContainer.appendChild(previewImg);

              logoPreviewContainer.innerHTML = '';
              logoPreviewContainer.appendChild(logoPreviewImg);

              // Show remove button
              document.getElementById('removeLogo').style.display = 'inline-flex';
            } else {
              alert(data.message || 'Failed to upload logo');
            }
          })
          .catch(error => {
            console.error('Upload error:', error);
            alert('Failed to upload logo. Please try again.');
          })
          .finally(() => {
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
          });
        }
      }

      function removeAppLogo() {
        if (!confirm('Are you sure you want to remove the logo?')) {
          return;
        }

        // Show loading state
        const button = document.getElementById('removeLogo');
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Removing...';
        button.disabled = true;

        // Remove logo via API
        fetch('/apps/api/remove-logo/<%= app._id %>', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            // Reset to initial state
            const name = document.getElementById('name').value || '<%= app.name %>';
            const initial = name.charAt(0).toUpperCase();

            // Update preview
            const previewContainer = document.getElementById('previewLogoContainer');
            previewContainer.innerHTML = `<span id="previewIcon" class="text-lg font-medium text-black">${initial}</span>`;

            // Update form preview
            const logoPreviewContainer = document.getElementById('logoPreviewContainer');
            logoPreviewContainer.innerHTML = `<span id="logoPreviewText" class="text-xl font-medium text-gray-400">${initial}</span>`;

            // Clear hidden input
            document.getElementById('logo').value = '';

            // Clear file input
            document.getElementById('logoUpload').value = '';

            // Hide remove button
            button.style.display = 'none';
          } else {
            alert(data.message || 'Failed to remove logo');
          }
        })
        .catch(error => {
          console.error('Remove error:', error);
          alert('Failed to remove logo. Please try again.');
        })
        .finally(() => {
          // Restore button state
          button.innerHTML = originalText;
          button.disabled = false;
        });
      }

      function confirmDelete() {
        if (
          confirm(
            'Are you sure you want to delete this application? This action cannot be undone and will remove all suggestions and votes.'
          )
        ) {
          // Create a form to submit DELETE request
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = '/apps/<%= app._id %>?_method=DELETE';
          document.body.appendChild(form);
          form.submit();
        }
      }

      // Category management functions
      let categoryCounter = parseInt('<%= app.customCategories ? app.customCategories.length : 0 %>');

      function toggleCategoryMode() {
        const isDefault = document.getElementById('defaultCategoriesEnabled').checked;
        const customSection = document.getElementById('customCategoriesSection');
        
        if (isDefault) {
          customSection.classList.add('hidden');
        } else {
          customSection.classList.remove('hidden');
          // Add one default custom category if none exist
          if (document.querySelectorAll('.custom-category-item').length === 0) {
            addCustomCategory();
          }
        }

        // Update categories preview
        updateCategoriesPreview();
      }

      function addCustomCategory(name = '', color = '#6b7280') {
        const categoriesList = document.getElementById('customCategoriesList');
        const categoryId = `category_${categoryCounter++}`;
        
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'custom-category-item flex items-center space-x-3';
        categoryDiv.innerHTML = `
          <input
            type="text"
            name="customCategories[${categoryCounter-1}][name]"
            placeholder="Category name"
            value="${name}"
            class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-gray-500 focus:ring-2 focus:ring-gray-200 focus:outline-none"
            required 
            oninput="updateCategoriesPreview()" />
          <input
            type="color"
            name="customCategories[${categoryCounter-1}][color]"
            value="${color}"
            class="h-10 w-16 cursor-pointer rounded-lg border border-gray-300"
            onchange="updateCategoriesPreview()" />
          <button
            type="button"
            onclick="removeCustomCategory(this)"
            class="flex h-8 w-8 items-center justify-center rounded-lg border border-red-300 bg-white text-red-700 hover:bg-red-50 focus:ring-2 focus:ring-red-200 focus:outline-none">
            <i class="fas fa-times text-xs"></i>
          </button>
        `;
        
        categoriesList.appendChild(categoryDiv);

        // Update categories preview
        updateCategoriesPreview();
      }

      function removeCustomCategory(button) {
        button.closest('.custom-category-item').remove();
        // Update categories preview
        updateCategoriesPreview();
      }

      // Form validation
      document
        .getElementById('appForm')
        .addEventListener('submit', function (e) {
          const name = document.getElementById('name').value.trim();
          const description = document
            .getElementById('description')
            .value.trim();

          if (!name || !description) {
            e.preventDefault();
            alert('Please fill in all required fields.');
            return;
          }

          if (name.length < 3) {
            e.preventDefault();
            alert('App name must be at least 3 characters long.');
            return;
          }

          if (description.length < 10) {
            e.preventDefault();
            alert('Description must be at least 10 characters long.');
            return;
          }
        });
    </script>
  </body>
</html>
