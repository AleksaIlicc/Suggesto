<!doctype html>
<html lang="en">
  <head>
    <title>Suggesto - Add Suggestion</title>
    <%- include('../../shared/includes/meta') %> <%-
    include('../../shared/includes/styles') %>
  </head>
  <body id="pageBody" class="bg-background">
    <div
      id="appHeader"
      class="flex justify-center p-6 shadow-sm sm:px-28 sm:py-14">
      <div class="flex w-full max-w-xl flex-col justify-center space-y-3">
        <div class="flex items-center space-x-4">
          <div
            class="flex h-10 w-10 items-center justify-center rounded-full bg-white">
            <% if (app.design && app.design.logo) { %>
            <img
              src="<%= app.design.logo %>"
              alt="<%= app.name %>"
              class="h-full w-full rounded-full object-cover" />
            <% } else { %>
            <span class="text-lg font-medium text-black"
              ><%= app.name.charAt(0) %></span
            >
            <% } %>
          </div>
          <h1 class="text-lg font-medium text-white sm:text-xl">
            <%= app.name %>
          </h1>
        </div>

        <p class="max-w-2xl text-sm text-gray-100 sm:text-base">
          Add a new suggestion to improve this application
        </p>
      </div>
    </div>

    <main class="mx-auto flex justify-center p-6 sm:px-28 sm:py-8">
      <div class="w-full max-w-xl">
        <!-- Back Button -->
        <div class="mb-6 flex justify-start">
          <a
            href="/apps/<%= appId %>"
            class="flex items-center text-gray-600 transition-colors hover:text-gray-900">
            <i class="fas fa-arrow-left mr-2"></i>
            Back to App
          </a>
        </div>
        <form
          action="/apps/<%= appId %>/add-suggestion"
          method="post"
          enctype="multipart/form-data"
          id="suggestionForm"
          class="bg-primary w-full space-y-6 rounded-xl p-10">
          <h2 id="formTitle" class="text-center text-2xl">Add suggestion</h2>
          <div class="space-y-4">
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700"
                >Title</label
              >
              <input
                type="text"
                id="title"
                name="title"
                required
                class="mt-1 block w-full rounded-xl border border-gray-300 px-3 py-2 focus:border-black focus:ring-2 focus:ring-black focus:outline-none"
                autocomplete="false" />
            </div>
            <div>
              <label
                for="description"
                class="block text-sm font-medium text-gray-700"
                >Description</label
              >
              <input
                type="text"
                id="description"
                name="description"
                required
                class="mt-1 block w-full rounded-xl border border-gray-300 px-3 py-2 focus:border-black focus:ring-2 focus:ring-black focus:outline-none"
                autocomplete="false" />
            </div>
            <div>
              <label
                for="category"
                class="block text-sm font-medium text-gray-700"
                >Category</label
              >
              <select
                id="category"
                name="category[name]"
                required
                class="mt-1 block w-full rounded-xl border border-gray-300 px-3 py-2 focus:border-black focus:ring-2 focus:ring-black focus:outline-none"
                onchange="updateCategoryColor()">
                <option value="">Select a category</option>
                <% availableCategories.forEach(category => { %>
                <option
                  value="<%= category.name %>"
                  data-color="<%= category.color %>">
                  <%= category.name.charAt(0).toUpperCase() +
                  category.name.slice(1) %>
                </option>
                <% }); %>
              </select>
              <input
                type="hidden"
                id="categoryColor"
                name="category[color]"
                value="" />
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700"
              >Media Files</label
            >
            <div class="mt-1 w-full">
              <div
                id="uploadContainer"
                class="relative rounded-xl border-2 border-dashed border-gray-300 p-8 text-center transition-colors hover:border-gray-400">
                <input
                  type="file"
                  id="files"
                  name="files"
                  multiple
                  accept="image/*,.pdf,.doc,.docx,.txt"
                  class="absolute inset-0 h-full w-full cursor-pointer opacity-0" />
                <div class="space-y-2">
                  <i class="fas fa-cloud-upload-alt text-3xl text-gray-400"></i>
                  <p class="text-sm font-medium text-gray-700">
                    Drag and drop files here
                  </p>
                  <p class="text-xs text-gray-500">or click to select files</p>
                  <p class="text-xs text-gray-500">
                    (Max 3 files: images, PDFs, or documents)
                  </p>
                </div>
              </div>

              <div
                id="previewContainer"
                class="mt-4 hidden grid-cols-2 gap-4 sm:grid-cols-3"
                style="display: none"></div>

              <p
                id="errorMessage"
                class="text-gray-dark mt-2 hidden text-sm"></p>
            </div>
          </div>
          <button
            id="submitButton"
            type="submit"
            class="bg-gray-dark hover:bg-gray-light w-full cursor-pointer rounded-xl py-2 text-white transition-colors duration-300 ease-in-out hover:text-white focus:ring-2 focus:ring-black focus:outline-none">
            Add Suggestion
          </button>
        </form>
      </div>
    </main>

    <%- include('../../shared/includes/scripts') %>
    <script>
      const fileInput = document.getElementById('files');
      const previewContainer = document.getElementById('previewContainer');
      const errorMessage = document.getElementById('errorMessage');
      const uploadContainer = document.getElementById('uploadContainer');
      let selectedFiles = [];

      fileInput.addEventListener('change', handleFileSelect);
      uploadContainer.addEventListener('dragover', e => e.preventDefault());
      uploadContainer.addEventListener('drop', handleFileDrop);

      function handleFileDrop(e) {
        e.preventDefault();
        handleFiles(e.dataTransfer.files);
      }

      function handleFileSelect(e) {
        handleFiles(e.target.files);
      }

      function isFileDuplicate(file) {
        return selectedFiles.some(
          existingFile =>
            existingFile.name === file.name && existingFile.size === file.size
        );
      }

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
      }

      function handleFiles(files) {
        const newFiles = Array.from(files);

        if (selectedFiles.length + newFiles.length > 3) {
          showError('Maximum 3 files allowed');
          return;
        }

        for (const file of newFiles) {
          if (isFileDuplicate(file)) {
            showError('File already added: ' + file.name);
            return;
          }
        }

        errorMessage.classList.add('hidden');
        selectedFiles = [...selectedFiles, ...newFiles].slice(0, 3);

        // Update the actual file input
        const dataTransfer = new DataTransfer();
        selectedFiles.forEach(file => dataTransfer.items.add(file));
        fileInput.files = dataTransfer.files;

        updatePreviews();
      }

      function updatePreviews() {
        previewContainer.innerHTML = '';

        if (selectedFiles.length > 0) {
          previewContainer.style.display = 'grid';
        } else {
          previewContainer.style.display = 'none';
        }

        selectedFiles.forEach((file, index) => {
          const preview = document.createElement('div');
          preview.className = 'relative aspect-square';

          let icon = 'fas fa-file';
          if (file.type.startsWith('image/')) {
            icon = 'fas fa-image';
            preview.innerHTML = `
              <img src="${URL.createObjectURL(file)}" class="w-full h-full object-cover rounded-lg" />
              <button onclick="removeFile(${index})" type="button" class="absolute cursor-pointer top-2 right-2 bg-gray-dark text-white rounded-full w-6 h-6 flex items-center justify-center">
                <i class="fas fa-times"></i>
              </button>
            `;
          } else if (file.type === 'application/pdf') {
            icon = 'fas fa-file-pdf';
            preview.innerHTML = `
              <div class="w-full h-full bg-red-100 rounded-lg flex flex-col items-center justify-center">
                <i class="${icon} text-red-600 text-2xl mb-2"></i>
                <span class="text-xs text-center px-2">${file.name}</span>
              </div>
              <button onclick="removeFile(${index})" type="button" class="absolute cursor-pointer top-2 right-2 bg-gray-dark text-white rounded-full w-6 h-6 flex items-center justify-center">
                <i class="fas fa-times"></i>
              </button>
            `;
          } else {
            preview.innerHTML = `
              <div class="w-full h-full bg-gray-100 rounded-lg flex flex-col items-center justify-center">
                <i class="${icon} text-gray-600 text-2xl mb-2"></i>
                <span class="text-xs text-center px-2">${file.name}</span>
              </div>
              <button onclick="removeFile(${index})" type="button" class="absolute cursor-pointer top-2 right-2 bg-gray-dark text-white rounded-full w-6 h-6 flex items-center justify-center">
                <i class="fas fa-times"></i>
              </button>
            `;
          }

          previewContainer.appendChild(preview);
        });
      }

      function removeFile(index) {
        selectedFiles.splice(index, 1);

        // Update the actual file input
        const dataTransfer = new DataTransfer();
        selectedFiles.forEach(file => dataTransfer.items.add(file));
        fileInput.files = dataTransfer.files;

        updatePreviews();
      }

      function updateCategoryColor() {
        const categorySelect = document.getElementById('category');
        const selectedOption =
          categorySelect.options[categorySelect.selectedIndex];
        const color = selectedOption.getAttribute('data-color') || '';

        document.getElementById('categoryColor').value = color;
      }

      // Initialize category color on page load
      document.addEventListener('DOMContentLoaded', function () {
        updateCategoryColor();

        // Apply custom app design
        const backgroundColor = '<%= app.design?.backgroundColor %>';
        const headerColor = '<%= app.design?.headerColor %>';
        const headerTextColor = '<%= app.design?.headerTextColor %>';
        const buttonColor = '<%= app.design?.buttonColor %>';
        const buttonTextColor = '<%= app.design?.buttonTextColor %>';
        const backButtonColor = '<%= app.design?.backButtonColor %>';
        const cardBgColor = '<%= app.design?.suggestionCardBgColor %>';
        const textColor = '<%= app.design?.suggestionTextColor %>';

        // Set header background and text
        const headerElement = document.getElementById('appHeader');
        if (headerElement) {
          headerElement.style.backgroundColor = headerColor;
          const headerTitle = headerElement.querySelector('h1');
          const headerDescription = headerElement.querySelector('p');
          if (headerTitle) headerTitle.style.color = headerTextColor;
          if (headerDescription)
            headerDescription.style.color = headerTextColor;
        }

        // Apply back button color
        const backButton = document.querySelector('a[href*="/apps/"]');
        if (backButton) {
          backButton.style.color = backButtonColor;
          // Override hover state to maintain custom color
          backButton.style.setProperty('color', backButtonColor, 'important');
          backButton.addEventListener('mouseenter', () => {
            backButton.style.setProperty('color', backButtonColor, 'important');
          });
          backButton.addEventListener('mouseleave', () => {
            backButton.style.setProperty('color', backButtonColor, 'important');
          });
        }

        // Set body background
        const bodyElement = document.getElementById('pageBody');
        if (bodyElement) {
          bodyElement.style.backgroundColor = backgroundColor;
        }

        // Set main background
        const mainElement = document.querySelector('main');
        if (mainElement) {
          mainElement.style.backgroundColor = backgroundColor;
        }

        // Set form background
        const formElement = document.getElementById('suggestionForm');
        if (formElement) {
          formElement.style.backgroundColor = cardBgColor;
        }

        // Set form title color
        const titleElement = document.getElementById('formTitle');
        if (titleElement) {
          titleElement.style.color = textColor;
        }

        // Set label colors
        const labels = document.querySelectorAll('label');
        labels.forEach(label => {
          label.style.color = textColor;
        });

        // Set submit button background and text
        const submitButton = document.getElementById('submitButton');
        if (submitButton) {
          submitButton.style.backgroundColor = buttonColor;
          submitButton.style.color = buttonTextColor;
        }

        // Update upload container text colors
        const uploadText = document.querySelectorAll('#uploadContainer p');
        uploadText.forEach(text => {
          if (text.classList.contains('text-gray-700')) {
            text.style.color = textColor;
          }
        });
      });
    </script>
  </body>
</html>
