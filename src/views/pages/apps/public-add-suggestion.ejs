<!doctype html>
<html lang="en">
  <head>
    <title>Submit Feature Request - <%= app.name %></title>
    <%- include('../../shared/includes/meta') %> 
    <%- include('../../shared/includes/styles') %>
  </head>
  <body class="bg-background">
    <div class="flex min-h-screen flex-col items-center">
      <%- include('../../shared/partials/header') %>
      
      <main class="flex w-full max-w-2xl grow flex-col justify-center px-4 py-4 sm:py-8">
        <div class="mb-8 text-center">
          <h2 class="text-gray-dark text-2xl font-bold sm:text-3xl mb-2">
            Submit Feature Request
          </h2>
          <p class="text-gray-600">
            Share your ideas for <span class="font-semibold text-gray-dark"><%= app.name %></span>
          </p>
        </div>

        <form action="/apps/browse/<%= appId %>/suggest" method="post" enctype="multipart/form-data" 
              class="bg-white w-full space-y-6 rounded-xl p-8 shadow-sm">
          
          <div class="space-y-4">
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                Feature Title *
              </label>
              <input type="text" id="title" name="title" required
                     placeholder="Brief description of your feature request"
                     class="mt-1 block w-full rounded-xl border border-gray-300 px-4 py-3 focus:border-gray-dark focus:ring-2 focus:ring-gray-dark focus:outline-none transition-colors" />
            </div>
            
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Detailed Description *
              </label>
              <textarea id="description" name="description" rows="5" required
                        placeholder="Explain your feature request in detail. What problem does it solve? How would it work?"
                        class="mt-1 block w-full rounded-xl border border-gray-300 px-4 py-3 focus:border-gray-dark focus:ring-2 focus:ring-gray-dark focus:outline-none transition-colors resize-none"></textarea>
            </div>
            
            <div>
              <label for="files" class="block text-sm font-medium text-gray-700 mb-2">
                Attachments (Optional)
              </label>
              <div id="uploadContainer" 
                   class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-xl hover:border-gray-400 transition-colors cursor-pointer">
                <div class="space-y-1 text-center">
                  <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                  <div class="flex text-sm text-gray-600">
                    <label for="files" class="relative cursor-pointer rounded-md font-medium text-gray-dark hover:text-gray-500">
                      <span>Upload files</span>
                      <input id="files" name="files" type="file" class="sr-only" multiple accept="image/*,.pdf,.doc,.docx">
                    </label>
                    <p class="pl-1">or drag and drop</p>
                  </div>
                  <p class="text-xs text-gray-500">PNG, JPG, PDF up to 10MB (max 3 files)</p>
                </div>
              </div>
              <div id="errorMessage" class="mt-2 text-sm text-red-600 hidden"></div>
              <div id="previewContainer" class="mt-4 grid grid-cols-1 gap-2"></div>
            </div>
          </div>
          
          <div class="pt-4">
            <button type="submit" 
                    class="bg-gray-dark hover:bg-gray-light w-full cursor-pointer rounded-xl py-3 text-white transition-colors duration-300 ease-in-out hover:text-white focus:ring-2 focus:ring-gray-dark focus:outline-none">
              Submit Feature Request
            </button>
          </div>
          
          <div class="text-center pt-2">
            <a href="/apps/browse/<%= appId %>" class="text-sm text-gray-600 hover:text-gray-dark transition-colors">
              ← Back to <%= app.name %>
            </a>
          </div>
        </form>
      </main>
    </div>

    <%- include('../../shared/includes/scripts') %>
    <script>
      const fileInput = document.getElementById('files');
      const previewContainer = document.getElementById('previewContainer');
      const errorMessage = document.getElementById('errorMessage');
      const uploadContainer = document.getElementById('uploadContainer');
      let selectedFiles = [];

      fileInput.addEventListener('change', handleFileSelect);
      uploadContainer.addEventListener('dragover', e => e.preventDefault());
      uploadContainer.addEventListener('drop', handleFileDrop);

      function handleFileDrop(e) {
        e.preventDefault();
        handleFiles(e.dataTransfer.files);
      }

      function handleFileSelect(e) {
        handleFiles(e.target.files);
      }

      function isFileDuplicate(file) {
        return selectedFiles.some(existingFile => 
          existingFile.name === file.name && existingFile.size === file.size
        );
      }

      function handleFiles(files) {
        errorMessage.classList.add('hidden');
        
        for (let file of files) {
          if (selectedFiles.length >= 3) {
            showError('Maximum 3 files allowed');
            break;
          }
          
          if (file.size > 10 * 1024 * 1024) {
            showError(`File "${file.name}" is too large. Maximum size is 10MB.`);
            continue;
          }
          
          if (isFileDuplicate(file)) {
            showError(`File "${file.name}" is already selected.`);
            continue;
          }
          
          selectedFiles.push(file);
          addFilePreview(file);
        }
        
        updateFileInput();
      }

      function addFilePreview(file) {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'flex items-center justify-between bg-gray-50 rounded-lg p-3';
        
        const fileInfo = document.createElement('div');
        fileInfo.className = 'flex items-center space-x-3';
        
        const fileIcon = document.createElement('div');
        fileIcon.className = 'flex-shrink-0';
        fileIcon.innerHTML = getFileIcon(file.type);
        
        const fileDetails = document.createElement('div');
        fileDetails.innerHTML = `
          <p class="text-sm font-medium text-gray-900">${file.name}</p>
          <p class="text-xs text-gray-500">${formatFileSize(file.size)}</p>
        `;
        
        fileInfo.appendChild(fileIcon);
        fileInfo.appendChild(fileDetails);
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'text-red-600 hover:text-red-800 transition-colors';
        removeBtn.innerHTML = '✕';
        removeBtn.onclick = () => removeFile(file, fileDiv);
        
        fileDiv.appendChild(fileInfo);
        fileDiv.appendChild(removeBtn);
        previewContainer.appendChild(fileDiv);
      }

      function removeFile(file, fileDiv) {
        selectedFiles = selectedFiles.filter(f => f !== file);
        fileDiv.remove();
        updateFileInput();
      }

      function updateFileInput() {
        const dt = new DataTransfer();
        selectedFiles.forEach(file => dt.items.add(file));
        fileInput.files = dt.files;
      }

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
      }

      function getFileIcon(mimeType) {
        if (mimeType.startsWith('image/')) {
          return '<svg class="h-8 w-8 text-green-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>';
        } else if (mimeType === 'application/pdf') {
          return '<svg class="h-8 w-8 text-red-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>';
        } else {
          return '<svg class="h-8 w-8 text-gray-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>';
        }
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
    </script>
  </body>
</html>
