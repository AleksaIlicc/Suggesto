<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../../shared/includes/meta') %>
    <title><%= suggestion.title %> - <%= app.name %></title>
    <%- include('../../shared/includes/styles') %>
  </head>

  <body id="pageBody" class="bg-background">
    <% if (isOwner) { %>
    <div class="fixed right-8 bottom-8">
      <a
        href="/apps"
        class="flex h-14 w-14 items-center justify-center rounded-full bg-white shadow-md">
        <i class="fas fa-th text-gray-dark text-xl"></i>
      </a>
    </div>
    <% } %>

    <!-- Header Section -->
    <div
      id="appHeader"
      class="flex justify-center p-6 shadow-sm sm:px-28 sm:py-14">
      <div class="flex w-full max-w-xl flex-col justify-center space-y-3">
        <div class="flex items-center space-x-4">
          <div
            class="flex h-10 w-10 items-center justify-center rounded-full bg-white">
            <% if (app.design && app.design.logo) { %>
            <img
              src="<%= app.design.logo %>"
              alt="<%= app.name %>"
              class="h-full w-full rounded-full object-cover" />
            <% } else { %>
            <span class="text-lg font-medium text-black"
              ><%= app.name.charAt(0) %></span
            >
            <% } %>
          </div>
          <h1 class="text-lg font-medium text-white sm:text-xl">
            <%= app.name %>
          </h1>
        </div>

        <p class="max-w-2xl text-sm text-gray-100 sm:text-base">
          <%= app.description %>
        </p>
      </div>
    </div>

    <main class="mx-auto flex justify-center p-6 sm:px-28 sm:py-8">
      <div class="w-full max-w-xl">
        <!-- Back Button -->
        <div class="mb-6 flex justify-start">
          <a
            href="/apps/<%= app._id %>"
            class="flex items-center text-gray-600 transition-colors hover:text-gray-900">
            <i class="fas fa-arrow-left mr-2"></i>
            Back to App
          </a>
        </div>

        <!-- Suggestion Detail Card -->
        <div class="rounded-xl p-6 shadow-sm sm:p-8" id="suggestionCard">
          <!-- Category and Meta Information -->
          <div class="mb-4 flex flex-wrap items-center justify-between gap-3">
            <div class="flex flex-wrap items-center gap-3">
              <!-- Category Badge -->
              <% if (suggestion.category) { %>
              <span
                id="category-badge-<%= suggestion._id %>"
                class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium text-white">
                <%= suggestion.category.name.charAt(0).toUpperCase() +
                suggestion.category.name.slice(1) %>
              </span>
              <% } %>

              <span class="text-sm" id="suggestionMeta">
                by <%= suggestion.userId ? `${suggestion.userId.firstName}
                ${suggestion.userId.lastName}` : 'Anonymous User' %> â€¢ <%=
                moment(suggestion.createdAt).format('MMM DD, YYYY') %>
              </span>
            </div>

            <!-- Vote Button in top right -->
            <div class="flex items-center">
              <button
                onclick="toggleVote('<%= suggestion._id %>')"
                id="vote-btn-<%= suggestion._id %>"
                class="flex cursor-pointer items-center space-x-2 rounded-lg px-3 py-2 transition-all hover:opacity-90 active:scale-95"
                <% /* eslint-disable css-propertyvalueexpected */ %> style="border: 1px solid <%= suggestion.hasUserVoted ? app.design?.voteButtonTextColor : 'transparent' %>">
                <i class="fas fa-chevron-up text-sm"></i>
                <span
                  class="text-sm font-medium"
                  id="vote-count-<%= suggestion._id %>">
                  <%= suggestion.voteCount || 0 %>
                </span>
              </button>
            </div>
          </div>

          <!-- Title and Description -->
          <div class="mb-6">
            <h2
              class="mb-4 text-xl font-semibold sm:text-2xl"
              id="suggestionTitle">
              <%= suggestion.title %>
            </h2>
            <div
              class="text-base leading-relaxed sm:text-lg"
              id="suggestionDescription">
              <%= suggestion.description %>
            </div>
          </div>

          <!-- Files Display -->
          <% if (suggestion.files && suggestion.files.length > 0) { %>
          <div class="mb-6">
            <h3 class="mb-3 text-lg font-medium" id="attachmentsTitle">
              Attachments
            </h3>
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <% suggestion.files.forEach(file => { %>
              <div class="overflow-hidden rounded-lg border border-gray-200">
                <% if (file.mimetype.startsWith('image/')) { %>
                <!-- Image Preview -->
                <div
                  class="flex aspect-video items-center justify-center bg-gray-100">
                  <img
                    src="/uploads/<%= file.filename %>"
                    alt="<%= file.originalName %>"
                    class="max-h-full max-w-full cursor-pointer object-contain"
                    onclick="openImageModal('/uploads/<%= file.filename %>', '<%= file.originalName %>')" />
                </div>
                <div class="p-3">
                  <p class="truncate text-sm font-medium text-gray-900">
                    <%= file.originalName %>
                  </p>
                  <p class="text-xs text-gray-500">
                    <%= (file.size / 1024 / 1024).toFixed(2) %> MB
                  </p>
                </div>
                <% } else { %>
                <!-- Non-image File -->
                <a
                  href="/uploads/<%= file.filename %>"
                  target="_blank"
                  class="block p-4 transition-colors hover:bg-gray-50">
                  <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0">
                      <% if (file.mimetype === 'application/pdf') { %>
                      <i class="fas fa-file-pdf text-2xl text-red-500"></i>
                      <% } else if (file.mimetype.includes('word')) { %>
                      <i class="fas fa-file-word text-2xl text-blue-500"></i>
                      <% } else if (file.mimetype.includes('text')) { %>
                      <i class="fas fa-file-alt text-2xl text-gray-500"></i>
                      <% } else { %>
                      <i class="fas fa-file text-2xl text-gray-500"></i>
                      <% } %>
                    </div>
                    <div class="min-w-0 flex-1">
                      <p class="truncate text-sm font-medium text-gray-900">
                        <%= file.originalName %>
                      </p>
                      <p class="text-xs text-gray-500">
                        <%= (file.size / 1024 / 1024).toFixed(2) %> MB
                      </p>
                    </div>
                    <div class="flex-shrink-0">
                      <i class="fas fa-external-link-alt text-gray-400"></i>
                    </div>
                  </div>
                </a>
                <% } %>
              </div>
              <% }); %>
            </div>
          </div>
          <% } %>

          <!-- Comments Section -->
          <% if (suggestion.comments && suggestion.comments.length > 0) { %>
          <div class="mb-6">
            <h3 class="mb-4 text-lg font-medium" id="commentsTitle">
              Comments (<%= suggestion.comments.length %>)
            </h3>
            <div class="space-y-4">
              <% suggestion.comments.forEach(comment => { %>
              <div class="border-l-4 border-gray-200 py-2 pl-4">
                <div class="mb-2 flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <span class="text-sm font-medium" id="commentAuthor">
                      <%= comment.user ? comment.user.firstName + ' ' +
                      comment.user.lastName : 'Anonymous User' %>
                    </span>
                    <span class="text-xs text-gray-500">
                      <%= moment(comment.createdAt).format("MMM DD, YYYY") %>
                    </span>
                  </div>
                </div>
                <p class="text-sm leading-relaxed" id="commentText">
                  <%= comment.text %>
                </p>
              </div>
              <% }); %>
            </div>
          </div>
          <% } %>

          <!-- Add Comment Form -->
          <% if (user) { %>
          <div class="mb-6">
            <h3 class="mb-4 text-lg font-medium" id="addCommentTitle">
              Add a Comment
            </h3>
            <form id="commentForm" onsubmit="addComment(event)">
              <div class="mb-4">
                <textarea
                  id="commentText"
                  name="text"
                  rows="4"
                  class="w-full rounded-lg border border-gray-300 px-4 py-3 text-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none"
                  placeholder="Share your thoughts about this suggestion..."
                  required></textarea>
              </div>
              <div class="flex justify-end">
                <button
                  type="submit"
                  id="submitCommentBtn"
                  class="rounded-lg px-6 py-2 text-sm font-medium text-white transition-colors hover:opacity-90 focus:ring-2 focus:ring-offset-2 focus:outline-none"
                  style="background-color: var(--button-color, #111827)">
                  Add Comment
                </button>
              </div>
            </form>
          </div>
          <% } else { %>
          <div class="mb-6 rounded-lg bg-gray-50 p-4 text-center">
            <p class="text-sm text-gray-600">
              <a href="/auth/login" class="text-blue-600 hover:text-blue-800">
                Log in
              </a>
              to leave a comment
            </p>
          </div>
          <% } %>
        </div>
      </div>
    </main>

    <!-- Image Modal -->
    <div
      id="imageModal"
      class="bg-opacity-75 fixed inset-0 z-50 hidden bg-black"
      onclick="closeImageModal()">
      <div
        class="mx-auto flex h-full max-h-full max-w-4xl items-center justify-center p-4">
        <div class="max-h-full max-w-full">
          <img id="modalImage" class="max-h-full max-w-full object-contain" />
          <p id="modalImageName" class="mt-2 text-center text-white"></p>
        </div>
      </div>
    </div>

    <%- include('../../shared/includes/scripts') %>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // Apply custom app design
        const backgroundColor = '<%= app.design?.backgroundColor %>';
        const headerColor = '<%= app.design?.headerColor %>';
        const headerTextColor = '<%= app.design?.headerTextColor %>';
        const buttonColor = '<%= app.design?.buttonColor %>';
        const backButtonColor = '<%= app.design?.backButtonColor %>';
        const cardBgColor = '<%= app.design?.suggestionCardBgColor %>';
        const textColor = '<%= app.design?.suggestionTextColor %>';
        const metaColor = '<%= app.design?.suggestionMetaColor %>';

        // Set header background
        const headerElement = document.getElementById('appHeader');
        if (headerElement) {
          headerElement.style.backgroundColor = headerColor;

          // Apply header text colors
          const headerTitle = headerElement.querySelector('h1');
          const headerDescription = headerElement.querySelector('p');
          if (headerTitle) headerTitle.style.color = headerTextColor;
          if (headerDescription)
            headerDescription.style.color = headerTextColor;
        }

        // Set body and main background
        const bodyElement = document.getElementById('pageBody');
        const mainElement = document.querySelector('main');
        if (bodyElement) bodyElement.style.backgroundColor = backgroundColor;
        if (mainElement) mainElement.style.backgroundColor = backgroundColor;

        // Style back button
        const backButton = document.querySelector('a[href*="/apps/"]');
        if (backButton) {
          backButton.style.color = backButtonColor;
          backButton.style.setProperty('color', backButtonColor, 'important');
          backButton.addEventListener('mouseenter', () => {
            backButton.style.setProperty('color', backButtonColor, 'important');
          });
          backButton.addEventListener('mouseleave', () => {
            backButton.style.setProperty('color', backButtonColor, 'important');
          });
        }

        // Style suggestion card
        const suggestionCard = document.getElementById('suggestionCard');
        if (suggestionCard) {
          suggestionCard.style.backgroundColor = cardBgColor;
        }

        // Style text elements
        const titleElement = document.getElementById('suggestionTitle');
        const descriptionElement = document.getElementById(
          'suggestionDescription'
        );
        const metaElement = document.getElementById('suggestionMeta');
        const attachmentsTitle = document.getElementById('attachmentsTitle');
        const commentsTitle = document.getElementById('commentsTitle');
        const commentAuthors = document.querySelectorAll('#commentAuthor');
        const commentTexts = document.querySelectorAll('#commentText');

        if (titleElement) titleElement.style.color = textColor;
        if (descriptionElement) descriptionElement.style.color = textColor;
        if (metaElement) metaElement.style.color = metaColor;
        if (attachmentsTitle) attachmentsTitle.style.color = textColor;

        // Style category badge if it exists
        const categoryBadge = document.getElementById(
          'category-badge-<%= suggestion._id %>'
        );
        const categoryColor =
          '<%= suggestion.category && suggestion.category.color ? suggestion.category.color : "" %>';
        if (categoryBadge && categoryColor) {
          categoryBadge.style.backgroundColor = categoryColor;
        }
        if (commentsTitle) commentsTitle.style.color = textColor;

        // Style comment form elements
        const addCommentTitle = document.getElementById('addCommentTitle');
        const commentTextarea = document.getElementById('commentText');
        const submitCommentBtn = document.getElementById('submitCommentBtn');

        if (addCommentTitle) addCommentTitle.style.color = textColor;
        if (submitCommentBtn) {
          submitCommentBtn.style.backgroundColor = buttonColor;
        }

        // Style comment elements
        commentAuthors.forEach(author => {
          if (author) author.style.color = textColor;
        });
        commentTexts.forEach(text => {
          if (text) text.style.color = textColor;
        });

        // Style vote button with dynamic colors
        const voteButton = document.getElementById(
          'vote-btn-<%= suggestion._id %>'
        );
        const voteCount = document.getElementById(
          'vote-count-<%= suggestion._id %>'
        );

        // Create color variables from app design
        const designColors = {
          voteButtonBg: '<%= app.design?.voteButtonBgColor %>',
          voteButtonText: '<%= app.design?.voteButtonTextColor %>',
        };

        // Default colors from Tailwind CSS classes
        const colors = {
          voteButtonBg: designColors.voteButtonBg,
          voteButtonText: designColors.voteButtonText,
        };

        // Always use the same colors regardless of vote status
        if (voteButton) {
          voteButton.style.backgroundColor = colors.voteButtonBg;
          voteButton.style.color = colors.voteButtonText;
          
          // Add border if user has voted
          const isVoted = '<%= suggestion.hasUserVoted %>' === 'true';
          if (isVoted) {
            voteButton.style.border = `2px solid ${colors.voteButtonText}`;
          } else {
            voteButton.style.border = '2px solid transparent';
          }
        }

        if (voteCount) {
          voteCount.style.color = colors.voteButtonText;
        }
      });

      // Voting functionality
      async function toggleVote(suggestionId) {
        try {
          const response = await fetch(
            `/apps/api/suggestions/${suggestionId}/vote`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
            }
          );

          const data = await response.json();

          if (data.success) {
            const voteBtn = document.getElementById(`vote-btn-${suggestionId}`);
            const voteCount = document.getElementById(
              `vote-count-${suggestionId}`
            );

            // Update vote count
            if (voteCount) {
              voteCount.textContent = data.voteCount;
            }

            // Get design colors - only use basic colors
            const designColors = {
              voteButtonBg: '<%= app.design?.voteButtonBgColor %>',
              voteButtonText: '<%= app.design?.voteButtonTextColor %>',
            };

            // Get colors from CSS custom properties as fallback
            const fallbackColors = {
              voteButtonBg:
                getComputedStyle(document.documentElement).getPropertyValue(
                  '--tw-color-gray-200'
                ) || 'rgb(229, 231, 235)',
              voteButtonText:
                getComputedStyle(document.documentElement).getPropertyValue(
                  '--tw-color-gray-700'
                ) || 'rgb(55, 65, 81)',
            };

            const voteButtonBgColor =
              designColors.voteButtonBg || fallbackColors.voteButtonBg;
            const voteButtonTextColor =
              designColors.voteButtonText || fallbackColors.voteButtonText;

            // Always use the same colors regardless of vote status
            if (voteBtn) {
              voteBtn.style.backgroundColor = voteButtonBgColor;
              voteBtn.style.color = voteButtonTextColor;
              
              // Add border if voted, remove if not voted
              if (data.voted) {
                voteBtn.style.border = `2px solid ${voteButtonTextColor}`;
              } else {
                voteBtn.style.border = '2px solid transparent';
              }
            }

            // Update vote count color - always use the same text color
            if (voteCount) {
              voteCount.style.color = voteButtonTextColor;
            }
          } else {
            alert(data.message || 'Failed to process vote');
          }
        } catch (error) {
          console.error('Error voting:', error);
          alert('Failed to process vote. Please try again.');
        }
      }

      // Image modal functionality
      function openImageModal(imageSrc, imageName) {
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        const modalImageName = document.getElementById('modalImageName');

        modalImage.src = imageSrc;
        modalImageName.textContent = imageName;
        modal.classList.remove('hidden');
      }

      function closeImageModal() {
        const modal = document.getElementById('imageModal');
        modal.classList.add('hidden');
      }

      // Close modal on Escape key
      document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
          closeImageModal();
        }
      });

      // Add comment functionality
      async function addComment(event) {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);
        const commentText = formData.get('text').trim();

        if (!commentText) {
          alert('Please enter a comment before submitting.');
          return;
        }

        const submitBtn = document.getElementById('submitCommentBtn');
        const originalText = submitBtn.innerHTML;

        try {
          // Show loading state
          submitBtn.innerHTML =
            '<i class="fas fa-spinner fa-spin mr-2"></i>Adding...';
          submitBtn.disabled = true;

          const response = await fetch(
            `/apps/api/suggestions/<%= suggestion._id %>/comments`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ text: commentText }),
            }
          );

          const data = await response.json();

          if (data.success) {
            // Clear the form
            form.reset();

            // Show success message
            submitBtn.innerHTML = '<i class="fas fa-check mr-2"></i>Added!';
            setTimeout(() => {
              submitBtn.innerHTML = originalText;
            }, 2000);

            // Refresh the page to show the new comment
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            throw new Error(data.message || 'Failed to add comment');
          }
        } catch (error) {
          console.error('Error adding comment:', error);
          alert('Failed to add comment. Please try again.');
          submitBtn.innerHTML = originalText;
        } finally {
          submitBtn.disabled = false;
        }
      }
    </script>
  </body>
</html>
